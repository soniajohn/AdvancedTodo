{"ast":null,"code":"var _jsxFileName = \"/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js\",\n    _s = $RefreshSig$();\n\nimport react from 'react';\nimport React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useContext } from 'react';\nimport Axios from 'axios';\nimport { ListContext } from '../context/ListContext.js';\nimport { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tasklist = () => {\n  _s();\n\n  const {\n    username,\n    SetUsername,\n    userid,\n    SetUserid,\n    taskid,\n    SetTaskid\n  } = useContext(ListContext);\n  const {\n    optionname,\n    setOptionname\n  } = useContext(ListContext);\n  const [task, setTasks] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [toggleBtn, setToggleBtn] = useState(true);\n  const [isEditItem, setIsEditItem] = useState(null);\n  const [optStatus, setOptStatus] = useState(false);\n  const [taskValue, setTaskvalue] = useState(\"\");\n  const [validatevalue, setValidatevalue] = useState(\"\");\n  const [fetchlist, setFetchlist] = useState([]);\n  const [showList, setshowList] = useState([]);\n  let history = useHistory();\n  const [usertasklist, setUsertasklist] = useState([]);\n\n  function passData(val) {\n    if (val.length > 0) {\n      var name = val[0].toUpperCase() + val.slice(1);\n    }\n\n    setTasks(name);\n    return val.length < 15 ? '' : setValidatevalue(\"max char 15\");\n  }\n\n  const submitTask = () => {\n    if (task) {\n      Axios.post(\"http://localhost:4000/taskinsert\", {\n        task: task,\n        userid: userid\n      }).then(() => {\n        alert(\"successful insert\");\n      });\n      addItem();\n    } else {\n      setTaskvalue(\"please fill the field\");\n      inputRef.current.focus();\n    }\n  };\n\n  const inputRef = useRef();\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const deleteItem = (id, task_del) => {\n    const updatedItems = items.filter((elm, ind) => {\n      return ind !== id;\n    });\n    deleteTask(task_del);\n    setItems(updatedItems);\n  };\n\n  const updateTask = (tasname, txt) => {\n    Axios.put(\"http://localhost:4000/edit\", {\n      tasname: tasname,\n      original_txt: txt\n    }).then(response => {//alert(\"update\");\n    });\n  };\n\n  const updateTaskStatus = (txt, status) => {\n    Axios.put(\"http://localhost:4000/Update\", {\n      status: status,\n      txtupdate: txt\n    }).then(response => {//alert(\"update\");\n    });\n  };\n\n  useEffect(() => {\n    Axios.get(`http://localhost:4000/fetchData/${userid}`, {\n      userid: userid\n    }).then(response => {\n      setItems(response.data);\n      SetTaskid(response.data[0].Taskid);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n\n  const deleteTask = task_del => {\n    Axios.delete(`http://localhost:4000/delete/${task_del}`);\n  };\n\n  const addItem = () => {\n    if (!task) {} else if (task && !toggleBtn) {\n      setItems(items.map(elem => {\n        if (elem.Taskid === isEditItem) {\n          setToggleBtn(true);\n          setTasks(\" \");\n          updateTask(task, elem.Taskname);\n          return { ...elem,\n            Taskname: task\n          };\n        }\n\n        return elem;\n      }));\n    } else {\n      alert(\"taskid\" + taskid + 1);\n      setItems([{\n        childtodo_id: Date.now(),\n        Taskname: task,\n        status: false\n      }, ...items]);\n      setTasks(\"\");\n      setValidatevalue(\"\");\n    }\n  };\n\n  const editItem = id => {\n    let newEditItem = items.find(elem => {\n      alert(\"id=\" + id);\n      return elem.Taskid === id;\n    });\n    setToggleBtn(false);\n    alert(\"new=\" + newEditItem.Taskname);\n    setTasks(newEditItem.Taskname);\n    alert(\"id=\" + id);\n    setIsEditItem(id);\n  };\n\n  const redirectTask = () => {\n    history.push(\"/childlist\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(react.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"parent_div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"secondcontainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            class: \"heading\",\n            children: [\" Hi...\", username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 27\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 75\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"thirdcontainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ref: inputRef,\n              class: \"todonametxt\",\n              title: validatevalue,\n              value: task,\n              autoComplete: \"off\",\n              maxLength: \"20\",\n              onChange: e => passData(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 27\n            }, this), \"\\xA0\\xA0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"imgbutton\",\n            children: toggleBtn ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: submitTask,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                class: \"plusimage\",\n                src: \"/image/plus.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 70\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: addItem,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                class: \"plusimage\",\n                title: \"edit\",\n                src: \"https://img.icons8.com/color/48/000000/edit-property.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 158\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 132\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 27\n          }, this), items.map((elm, ind) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"insert\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"taskname\",\n                onChange: e => {\n                  setItems(items.filter(obj2 => {\n                    if (obj2.childtodo_id === elm.childtodo_id) {\n                      obj2.status = e.target.checked;\n                      setOptionname(elm.Taskname); //setOptionname(items)\n\n                      updateTaskStatus(obj2.text, obj2.status);\n                    }\n\n                    return obj2;\n                  }));\n                },\n                value: elm.Taskname,\n                checked: elm.status,\n                class: \"optionbtn\",\n                name: \"option\",\n                onClick: redirectTask\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                name: \"text\",\n                children: elm.Taskname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                title: \"edit item\",\n                class: \"editimg\",\n                src: \"https://img.icons8.com/color/48/000000/edit-property.png\",\n                onClick: () => editItem(elm.Taskid)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa fa-trash\",\n                title: \"delete Item\",\n                onClick: () => deleteItem(ind, elm.Taskname)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 10\n              }, this)]\n            }, ind, true, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tasklist, \"K5ufM3v7bTxwJ/XrUkHQDoK7tNQ=\", false, function () {\n  return [useHistory];\n});\n\n_c = Tasklist;\nexport default Tasklist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasklist\");","map":{"version":3,"sources":["/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js"],"names":["react","React","useState","Link","useHistory","useContext","Axios","ListContext","useRef","useEffect","Tasklist","username","SetUsername","userid","SetUserid","taskid","SetTaskid","optionname","setOptionname","task","setTasks","items","setItems","toggleBtn","setToggleBtn","isEditItem","setIsEditItem","optStatus","setOptStatus","taskValue","setTaskvalue","validatevalue","setValidatevalue","fetchlist","setFetchlist","showList","setshowList","history","usertasklist","setUsertasklist","passData","val","length","name","toUpperCase","slice","submitTask","post","then","alert","addItem","inputRef","current","focus","deleteItem","id","task_del","updatedItems","filter","elm","ind","deleteTask","updateTask","tasname","txt","put","original_txt","response","updateTaskStatus","status","txtupdate","get","data","Taskid","catch","err","console","log","delete","map","elem","Taskname","childtodo_id","Date","now","editItem","newEditItem","find","redirectTask","push","e","target","value","obj2","checked","text"],"mappings":"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","sourcesContent":["import react from 'react';\nimport React, { useState} from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport{useContext} from 'react';\nimport Axios from 'axios';\nimport {ListContext} from '../context/ListContext.js'\nimport  { useRef, useEffect } from 'react';\n\n\n  \n    \n\nconst Tasklist=()=>{\n\n\n  const{username,SetUsername,userid,SetUserid,taskid,SetTaskid}=useContext(ListContext);\n    const{optionname,setOptionname}=useContext(ListContext)\n    const [task,setTasks] = useState(\"\");\n    const [items,setItems]=useState([]);\n    const[toggleBtn,setToggleBtn]=useState(true);\n    const[isEditItem,setIsEditItem]=useState(null);\n    const[optStatus,setOptStatus]=useState(false);\n    const[taskValue,setTaskvalue]=useState(\"\")\n    const[validatevalue,setValidatevalue]=useState(\"\")\n    const[fetchlist,setFetchlist]=useState([])\n    const[showList,setshowList]=useState([])\n    \n    let history=useHistory();\n\n    const[usertasklist,setUsertasklist]=useState([])\n\n\n\n\n\n\n\n\n  function passData(val)\n    \n      {\n        if(val.length>0)\n        {\n     var name= val[0].toUpperCase()+val.slice(1)\n      \n        }\n  \n      setTasks(name);\n  \n      return val.length<15 ?'':setValidatevalue(\"max char 15\");\n         \n      }\n\n\n\n  const submitTask=()=>{\n        \n      if(task){\n                \n        Axios.post(\"http://localhost:4000/taskinsert\",{\n        \n        task:task,userid:userid\n             \n        }).then(()=>{\n          alert(\"successful insert\")});\n          addItem();\n       \n     \n\n                    }\n       else{\n       setTaskvalue(\"please fill the field\");\n       inputRef.current.focus();\n            }\n                       };  \n  \n\n\n    const inputRef = useRef();\n      useEffect(() => {\n       inputRef.current.focus();\n\n                       })\n\n\n\n\n    const deleteItem=(id,task_del)=>{\n    const updatedItems=items.filter((elm,ind)=>{\n        \n           return ind!==id;\n       \n                      } ) ;\n             deleteTask(task_del);\n             setItems(updatedItems);\n\n          } \n\n\n\n\n\n\n\n\n\n\n\n\n          \n\n          const updateTask=(tasname,txt)=>{\n          \n           \n        \n        Axios.put(\"http://localhost:4000/edit\",\n             {\n              tasname:tasname,original_txt:txt\n            \n              }).then((response)=>\n          \n             { \n               //alert(\"update\");\n        \n              }\n            \n              );\n          \n          \n              }\n\n\n\n        const updateTaskStatus=(txt,status)=>{\n          \n                   \n        Axios.put(\"http://localhost:4000/Update\",\n           { status:status,txtupdate:txt}).then((response)=>\n          \n           { \n             //alert(\"update\");\n        \n           }\n            \n           );\n          \n          \n          }\n        \n        \n          useEffect(() => {\n          \n            Axios.get(`http://localhost:4000/fetchData/${userid}`,\n         { userid:userid}\n            \n            ).then(response=>{\n             \n         setItems(response.data)\n         SetTaskid(response.data[0].Taskid)\n          \n       \n            })\n            .catch(err=>{\n              console.log(err)\n            \n            })\n          \n            \n        }, []);           \n      \n           \n                \n         \n                  \n\n\n        const deleteTask=(task_del)=>{\n\n          Axios.delete(`http://localhost:4000/delete/${task_del}`);\n      \n                                     };\n \n\n    const addItem=()=>{\n         if(!task){\n                  }else if(task && !toggleBtn){\n\n                  setItems(\n                  items.map((elem)=>{\n                    \n                              if(elem.Taskid===isEditItem){\n                              setToggleBtn(true)\n          \n                              setTasks(\" \")\n                               updateTask(task,elem.Taskname)\n                               return{...elem,Taskname:task}\n            \n                                     }\n                  return elem;\n                  })\n      \n                           )\n                     } else{\n                       alert(\"taskid\"+taskid+1)\n                        \n                         setItems([{childtodo_id:Date.now(),Taskname:task,status:false},...items]);\n\n                          setTasks(\"\");\n                          setValidatevalue(\"\");\n   \n                            }\n                      }\n\n\n\n\n\n\n      const editItem=(id)=>{\n  \n        let newEditItem=items.find((elem)=>{\n        alert(\"id=\"+id)\n        return elem.Taskid===id\n\n                          });\n         setToggleBtn(false);\n         alert(\"new=\"+newEditItem.Taskname)\n          setTasks(newEditItem.Taskname)\n          alert(\"id=\"+id)\n          setIsEditItem(id)\n\n\n          }\n\n\n        const redirectTask=()=>{\n\n  \n\n        history.push(\"/childlist\");\n\n                 \n\n          }\n\n     \n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                            \n                          <label class=\"heading\"> Hi...{username}</label> <br></br> \n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\"  ref={inputRef} class=\"todonametxt\" title={validatevalue} value={task}autoComplete=\"off\" maxLength=\"20\" onChange={(e)=>passData(e.target.value)}></input>&nbsp;&nbsp;\n                          </span>\n                          \n                          <span class=\"imgbutton\">\n                            {\n\n                              toggleBtn?<button onClick={submitTask}><img class=\"plusimage\"  src=\"/image/plus.png\"></img></button>:<button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n                            }\n                            </span>\n                           \n                      \n                          { \n    \n    items.map((elm,ind)=>{\n  \n        return(\n          \n         \n                <div class=\"insert\" key={ind}>\n\n                <input type=\"radio\"  name=\"taskname\"    onChange={(e)=>{\n                \n                 setItems(items.filter(obj2=>{\n                  \n\n                  if(obj2.childtodo_id===elm.childtodo_id){\n          \n                   obj2.status=e.target.checked\n\n                setOptionname(elm.Taskname);\n  \n              //setOptionname(items)\n            \n               \n               updateTaskStatus(obj2.text,obj2.status)\n          \n                         \n                  }\n                  return obj2\n               \n                 \n                 })\n                 )}\n               \n                 } value={elm.Taskname} checked={elm.status} class=\"optionbtn\" name=\"option\" onClick= {redirectTask} \n                \n                 />\n                 \n                            \n                \n \n         <label name=\"text\">{elm.Taskname}</label>\n         <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={()=>editItem(elm.Taskid)}/>\n         <i class=\"fa fa-trash\" title=\"delete Item\" onClick={()=>deleteItem(ind,elm.Taskname)}></i>\n\n          \n              </div>\n            \n            \n             ) \n            \n            }\n            \n            \n            \n\n                \n            )\n                       \n}\n  \n                      \n                          </div>\n                        \n                   </div>\n                 \n          \n           </div>\n           \n          \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default Tasklist;"]},"metadata":{},"sourceType":"module"}