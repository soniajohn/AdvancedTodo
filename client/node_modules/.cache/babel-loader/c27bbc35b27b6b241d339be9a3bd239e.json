{"ast":null,"code":"var _jsxFileName = \"/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js\",\n    _s = $RefreshSig$();\n\nimport react from 'react';\nimport React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useContext } from 'react';\nimport Axios from 'axios';\nimport { ListContext } from '../context/ListContext.js';\nimport { useRef, useEffect } from 'react';\nimport { subnetMatch } from 'ipaddr.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tasklist = () => {\n  _s();\n\n  const {\n    username,\n    SetUsername,\n    userid,\n    SetUserid\n  } = useContext(ListContext);\n  const {\n    optionname,\n    setOptionname\n  } = useContext(ListContext);\n  const [task, setTasks] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [toggleBtn, setToggleBtn] = useState(true);\n  const [isEditItem, setIsEditItem] = useState(null);\n  const [optStatus, setOptStatus] = useState(false);\n  const [taskValue, setTaskvalue] = useState(\"\");\n  const [validatevalue, setValidatevalue] = useState(\"\");\n  const [fetchlist, setFetchlist] = useState([]);\n  const [showList, setshowList] = useState([]);\n  const [getid, setGetid] = useState(100);\n  let history = useHistory();\n  const [usertasklist, setUsertasklist] = useState([]);\n\n  function passData(val) {\n    if (val.length > 0) {\n      var name = val[0].toUpperCase() + val.slice(1);\n    }\n\n    setTasks(name);\n    return val.length < 15 ? '' : setValidatevalue(\"max char 15\");\n  }\n\n  const submitTask = () => {\n    if (task) {\n      //  Axios.post(\"http://localhost:4000/taskinsert\",{\n      //  task:task,userid:userid\n      Axios.post(`http://localhost:4000/users/${userid}/todolists`, {\n        todoid: getid,\n        task: task\n      }).then(() => {\n        alert(\"successful insert\");\n      });\n      addItem();\n    } else {\n      setTaskvalue(\"please fill the field\");\n      inputRef.current.focus();\n    }\n  };\n\n  const inputRef = useRef();\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const deleteItem = (id, todolist_id) => {\n    const updatedItems = items.filter((elm, ind) => {\n      return ind !== id;\n    });\n    deleteTask(todolist_id);\n    setItems(updatedItems);\n  };\n\n  const updateTask = (tasname, todolistid) => {\n    //alert(\"to=\"+todoid)\n    Axios.put(`http://localhost:4000/users/${userid}/todolists/${todolistid}`, {\n      tasname: tasname\n    }).then(response => {//alert(\"update\");\n    });\n  };\n\n  const updateTaskStatus = (txt, status) => {\n    Axios.put(\"http://localhost:4000/Update\", {\n      status: status,\n      txtupdate: txt\n    }).then(response => {//alert(\"update\");\n    });\n  };\n\n  useEffect(() => {\n    Axios.get(`http://localhost:4000/users/${userid}/todolists`, // Axios.get(`http://localhost:4000/fetchData/${userid}`,\n    {\n      userid: userid\n    }).then(response => {\n      setItems(response.data); // setItems([{Taskid:response.data[0].Taskid,Taskname:task,status:false},...items]); \n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n\n  const deleteTask = (todolist_id, userid) => {\n    alert(todolist_id);\n    Axios.delete(`http://localhost:4000/users/${userid}/todolists/${todolist_id}`);\n  };\n\n  const addItem = () => {\n    if (!task) {} else if (task && !toggleBtn) {\n      setItems(items.map(elem => {\n        if (elem.Todoid === isEditItem) {\n          setToggleBtn(true);\n          setTasks(\" \");\n          updateTask(task, elem.Todoid);\n          return { ...elem,\n            Todoname: task\n          };\n        }\n\n        return elem;\n      }));\n    } else {\n      // getTaskid()\n      // alert(\"getid=\"+getid)\n      setGetid(parseInt(getid + 1));\n      alert(getid); // setGetid(getid)\n\n      setItems([{\n        Todoid: getid,\n        Todoname: task,\n        status: false\n      }, ...items]);\n      setTasks(\"\");\n      setValidatevalue(\"\");\n    }\n  };\n\n  const editItem = id => {\n    let newEditItem = items.find(elem => {\n      //  alert(\"id=\"+id)\n      return elem.Todoid === id;\n    });\n    setToggleBtn(false); // alert(\"new=\"+newEditItem.Taskname)\n\n    setTasks(newEditItem.Todoname); // alert(\"id=\"+id)\n\n    setIsEditItem(id);\n  };\n\n  const redirectTask = () => {\n    history.push(\"/todolist\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(react.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"parent_div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"secondcontainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            class: \"heading\",\n            children: [\" Hi...\", username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 27\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 75\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"thirdcontainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              ref: inputRef,\n              class: \"todonametxt\",\n              title: validatevalue,\n              value: task,\n              autoComplete: \"off\",\n              maxLength: \"20\",\n              onChange: e => passData(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 27\n            }, this), \"\\xA0\\xA0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"imgbutton\",\n            children: toggleBtn ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: submitTask,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                class: \"plusimage\",\n                src: \"/image/plus.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 70\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: addItem,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                class: \"plusimage\",\n                title: \"edit\",\n                src: \"https://img.icons8.com/color/48/000000/edit-property.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 158\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 132\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 27\n          }, this), items.map((elm, ind) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"insert\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"radio\",\n                name: \"taskname\",\n                onChange: e => {\n                  setItems(items.filter(obj2 => {\n                    if (obj2.childtodo_id === elm.childtodo_id) {\n                      obj2.status = e.target.checked;\n                      setOptionname(elm.Todoname); //setOptionname(items)\n\n                      updateTaskStatus(obj2.text, obj2.status);\n                    }\n\n                    return obj2;\n                  }));\n                },\n                value: elm.Todoname,\n                checked: elm.status,\n                class: \"optionbtn\",\n                name: \"option\",\n                onClick: redirectTask\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                name: \"text\",\n                children: elm.Todoname\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                title: \"edit item\",\n                class: \"editimg\",\n                src: \"https://img.icons8.com/color/48/000000/edit-property.png\",\n                onClick: () => editItem(elm.Todoid)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa fa-trash\",\n                title: \"delete Item\",\n                onClick: () => deleteItem(ind, elm.Todoid)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 10\n              }, this)]\n            }, ind, true, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tasklist, \"wRnH5OC23zymPvS1PXdRhRN9k4Y=\", false, function () {\n  return [useHistory];\n});\n\n_c = Tasklist;\nexport default Tasklist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasklist\");","map":{"version":3,"sources":["/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js"],"names":["react","React","useState","Link","useHistory","useContext","Axios","ListContext","useRef","useEffect","subnetMatch","Tasklist","username","SetUsername","userid","SetUserid","optionname","setOptionname","task","setTasks","items","setItems","toggleBtn","setToggleBtn","isEditItem","setIsEditItem","optStatus","setOptStatus","taskValue","setTaskvalue","validatevalue","setValidatevalue","fetchlist","setFetchlist","showList","setshowList","getid","setGetid","history","usertasklist","setUsertasklist","passData","val","length","name","toUpperCase","slice","submitTask","post","todoid","then","alert","addItem","inputRef","current","focus","deleteItem","id","todolist_id","updatedItems","filter","elm","ind","deleteTask","updateTask","tasname","todolistid","put","response","updateTaskStatus","txt","status","txtupdate","get","data","catch","err","console","log","delete","map","elem","Todoid","Todoname","parseInt","editItem","newEditItem","find","redirectTask","push","e","target","value","obj2","childtodo_id","checked","text"],"mappings":"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","sourcesContent":["import react from 'react';\nimport React, { useState} from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport{useContext} from 'react';\nimport Axios from 'axios';\nimport {ListContext} from '../context/ListContext.js'\nimport  { useRef, useEffect } from 'react';\nimport { subnetMatch } from 'ipaddr.js';\n\n\n  \n    \n\nconst Tasklist=()=>{\n\n\n  const{username,SetUsername,userid,SetUserid}=useContext(ListContext);\n    const{optionname,setOptionname}=useContext(ListContext)\n    const [task,setTasks] = useState(\"\");\n    const [items,setItems]=useState([]);\n    const[toggleBtn,setToggleBtn]=useState(true);\n    const[isEditItem,setIsEditItem]=useState(null);\n    const[optStatus,setOptStatus]=useState(false);\n    const[taskValue,setTaskvalue]=useState(\"\")\n    const[validatevalue,setValidatevalue]=useState(\"\")\n    const[fetchlist,setFetchlist]=useState([])\n    const[showList,setshowList]=useState([])\n    const[getid,setGetid]=useState(100)\n    let history=useHistory();\n\n    const[usertasklist,setUsertasklist]=useState([])\n\n\n\n\n\n\n\n\n  function passData(val)\n    \n      {\n        if(val.length>0)\n        {\n     var name= val[0].toUpperCase()+val.slice(1)\n      \n        }\n  \n      setTasks(name);\n  \n      return val.length<15 ?'':setValidatevalue(\"max char 15\");\n         \n      }\n\n\n\n  const submitTask=()=>{\n        \n      if(task){\n                \n      //  Axios.post(\"http://localhost:4000/taskinsert\",{\n        \n      //  task:task,userid:userid\n      Axios.post(`http://localhost:4000/users/${userid}/todolists`,{\n            todoid:getid,\n             task:task\n        }).then(()=>{\n          alert(\"successful insert\")});\n          addItem();\n       \n     \n\n                    }\n       else{\n       setTaskvalue(\"please fill the field\");\n       inputRef.current.focus();\n            }\n                       };  \n  \n\n\n    const inputRef = useRef();\n      useEffect(() => {\n       inputRef.current.focus();\n\n                       })\n\n\n\n\n    const deleteItem=(id,todolist_id)=>{\n    const updatedItems=items.filter((elm,ind)=>{\n        \n           return ind!==id;\n       \n                      } ) ;\n             deleteTask(todolist_id);\n             setItems(updatedItems);\n\n          } \n\n\n\n\n\n          \n\n          const updateTask=(tasname,todolistid)=>{\n          \n           //alert(\"to=\"+todoid)\n        \n        Axios.put(`http://localhost:4000/users/${userid}/todolists/${todolistid}`,\n             {\n              tasname:tasname\n            \n              }).then((response)=>\n          \n             { \n               //alert(\"update\");\n        \n              }\n            \n              );\n          \n          \n              }\n\n              \n        const updateTaskStatus=(txt,status)=>{\n          \n                   \n        Axios.put(\"http://localhost:4000/Update\",\n           { status:status,txtupdate:txt}).then((response)=>\n          \n           { \n             //alert(\"update\");\n        \n           }\n            \n           );\n          \n          \n          }\n        \n        \n          useEffect(() => {\n            Axios.get(`http://localhost:4000/users/${userid}/todolists`,\n\n           // Axios.get(`http://localhost:4000/fetchData/${userid}`,\n         { userid:userid}\n            \n            ).then(response=>{\n            \n             \n       setItems(response.data)\n      \n      // setItems([{Taskid:response.data[0].Taskid,Taskname:task,status:false},...items]); \n       \n            })\n            .catch(err=>{\n              console.log(err)\n              \n            \n            })\n          \n            \n        }, []);           \n      \n           \n                \n         \n                  \n\n\n        const deleteTask=(todolist_id,userid)=>{\nalert(todolist_id)\n          Axios.delete(`http://localhost:4000/users/${userid}/todolists/${todolist_id}`);\n      \n                                     };\n \n\n    const addItem=()=>{\n         if(!task){\n                  }else if(task && !toggleBtn){\n\n                  setItems(\n                  items.map((elem)=>{\n                    \n                              if(elem.Todoid===isEditItem){\n                              setToggleBtn(true)\n          \n                              setTasks(\" \")\n                               updateTask(task,elem.Todoid)\n                               return{...elem,Todoname:task}\n            \n                                     }\n                  return elem;\n                  })\n      \n                           )\n                     } else{\n                     // getTaskid()\n                     // alert(\"getid=\"+getid)\n                     setGetid(parseInt(getid+1))\n                     alert(getid)\n                       // setGetid(getid)\n                         setItems([{Todoid:getid,Todoname:task,status:false},...items]);\n\n                          setTasks(\"\");\n                          setValidatevalue(\"\");\n   \n                            }\n                      }\n\n\n\n\n\n\n      const editItem=(id)=>{\n  \n        let newEditItem=items.find((elem)=>{\n      //  alert(\"id=\"+id)\n        return elem.Todoid===id\n\n                          });\n         setToggleBtn(false);\n        // alert(\"new=\"+newEditItem.Taskname)\n          setTasks(newEditItem.Todoname)\n         // alert(\"id=\"+id)\n          setIsEditItem(id)\n\n\n          }\n\n\n        const redirectTask=()=>{\n\n  \n\n        history.push(\"/todolist\");\n\n                 \n\n          }\n\n     \n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                            \n                          <label class=\"heading\"> Hi...{username}</label> <br></br> \n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\"  ref={inputRef} class=\"todonametxt\" title={validatevalue} value={task}autoComplete=\"off\" maxLength=\"20\" onChange={(e)=>passData(e.target.value)}></input>&nbsp;&nbsp;\n                          </span>\n                          \n                          <span class=\"imgbutton\">\n                            {\n\n                              toggleBtn?<button onClick={submitTask}><img class=\"plusimage\"  src=\"/image/plus.png\"></img></button>:<button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n                            }\n                            </span>\n                           \n                      \n                          { \n    \n    items.map((elm,ind)=>{\n  \n        return(\n          \n         \n                <div class=\"insert\" key={ind}>\n\n                <input type=\"radio\"  name=\"taskname\"    onChange={(e)=>{\n                \n                 setItems(items.filter(obj2=>{\n                  \n\n                  if(obj2.childtodo_id===elm.childtodo_id){\n          \n                   obj2.status=e.target.checked\n\n                setOptionname(elm.Todoname);\n  \n              //setOptionname(items)\n            \n               \n               updateTaskStatus(obj2.text,obj2.status)\n          \n                         \n                  }\n                  return obj2\n               \n                 \n                 })\n                 )}\n               \n                 } value={elm.Todoname} checked={elm.status} class=\"optionbtn\" name=\"option\" onClick= {redirectTask} \n                \n                 />\n                 \n                            \n                \n \n         <label name=\"text\">{elm.Todoname}</label>\n         <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={()=>editItem(elm.Todoid)}/>\n         <i class=\"fa fa-trash\" title=\"delete Item\" onClick={()=>deleteItem(ind,elm.Todoid)}></i>\n\n          \n              </div>\n            \n            \n             ) \n            \n            }\n            \n            \n            \n\n                \n            )\n                       \n}\n  \n                      \n                          </div>\n                        \n                   </div>\n                 \n          \n           </div>\n           \n          \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default Tasklist;"]},"metadata":{},"sourceType":"module"}