{"ast":null,"code":"var _jsxFileName = \"/home/sonia/projects/AdvancedToDo/client/src/components/ChildList.js\",\n    _s = $RefreshSig$();\n\nimport react from 'react';\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useContext } from 'react';\nimport { ListContext } from '../context/ListContext.js';\nimport Axios from 'axios';\nimport { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChildList = () => {\n  _s();\n\n  const [task, setTasks] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [toggleBtn, setToggleBtn] = useState(true);\n  const [isEditItem, setIsEditItem] = useState(null);\n  const [optStatus, setOptStatus] = useState(false);\n  const {\n    optionname,\n    setOptionname\n  } = useContext(ListContext);\n  const [validatevalue, setValidatevalue] = useState(\"\");\n  const [tskList, settskList] = useState([]);\n  const [showallCheck, setShowallCheck] = useState(\"\");\n  const [isChecked, setIsChecked] = useState(\"\");\n  let history = useHistory();\n\n  function passData(val) {\n    //setTasks(val)\n    if (val.length > 0) {\n      var name = val[0].toUpperCase() + val.slice(1);\n    }\n\n    setTasks(name);\n    return val.length < 15 ? '' : setValidatevalue(\"max char 15\");\n  }\n\n  const deleteItem = (id, task_del) => {\n    const updatedItems = items.filter((elm, ind) => {\n      return ind !== id;\n    });\n    deleteTask(task_del);\n    setItems(updatedItems);\n  };\n\n  const deleteTask = task_del => {\n    Axios.delete(`http://localhost:4000/childdelete/${task_del}`);\n  };\n\n  const updateTask = (tasname, txt) => {\n    // alert(\"status=\"+status)\n    Axios.put(\"http://localhost:4000/childedit\", {\n      tasname: tasname,\n      original_txt: txt\n    }).then(response => {\n      alert(\"update\");\n    });\n  };\n\n  const addItem = () => {\n    if (!task) {} else if (task && !toggleBtn) {\n      setItems(items.map(elem => {\n        if (elem.id === isEditItem) {\n          setToggleBtn(true);\n          setTasks(\" \");\n          alert(\"task=\" + task);\n          alert(\"elm=\" + elem.text);\n          updateTask(task, elem.text);\n          return { ...elem,\n            text: task\n          };\n        }\n\n        return elem;\n      }));\n    } else {\n      setItems([{\n        id: Date.now(),\n        text: task,\n        status: false\n      }, ...items]);\n      setTasks(\"\");\n    }\n  };\n\n  const inputRef = useRef();\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const submitTask = () => {\n    alert(\"task=\" + task);\n    alert(\"opt=\" + optionname);\n\n    if (task) {\n      Axios.post(\"http://localhost:4000/childinsert\", {\n        task: task,\n        text: optionname\n      }).then(() => {\n        alert(\"successful insert\");\n      });\n      addItem(); // redirect();\n    } //else{\n    // setTaskvalue(\"please fill the field\");\n    //inputRef.current.focus();\n    //}\n\n  };\n\n  const editItem = id => {\n    let newEditItem = items.find(elem => {\n      alert(\"elem=\" + elem.id);\n      alert(\"id=\" + id);\n      return elem.id === id;\n    });\n    setToggleBtn(false);\n    setTasks(newEditItem.text);\n    setIsEditItem(id);\n  };\n\n  const getTask = e => {\n    // `http://localhost:4000/childdelete/${task_del}`);\n    Axios.get(\"http://localhost:4000/showselected\").then(response => settskList(response.data));\n    setShowallCheck(e.target.checked);\n  };\n\n  const updateTaskStatus = (txt, status) => {\n    // alert(\"status=\"+status)\n    alert(\"hello hhhhxzx\");\n    Axios.put(\"http://localhost:4000/Childupdate\", {\n      status: status,\n      txtupdate: txt\n    }).then(response => {\n      alert(\"update\");\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(react.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"parent_div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"secondcontainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"x\",\n            class: \"closebtn\",\n            onClick: () => {\n              history.push(\"/\");\n            },\n            children: \" X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            class: \"heading\",\n            children: [\" \", optionname]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 27\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 72\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"thirdcontainer\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              class: \"todonametxt\",\n              ref: inputRef,\n              title: validatevalue,\n              value: task,\n              autoComplete: \"off\",\n              maxLength: \"20\",\n              onChange: e => passData(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 27\n            }, this), \"\\xA0\\xA0\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"imgbutton\",\n            children: toggleBtn ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: submitTask,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                class: \"plusimage\",\n                title: \"\",\n                src: \"/image/plus.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 70\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: addItem,\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                class: \"plusimage\",\n                title: \"edit\",\n                src: \"https://img.icons8.com/color/48/000000/edit-property.png\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 166\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 140\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 27\n          }, this), items.map((elm, ind) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"hhh\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                name: \"taskname\",\n                onChange: e => {\n                  setItems(items.filter(obj2 => {\n                    if (obj2.id === elm.id) {\n                      obj2.status = e.target.checked; // alert(\"obj2=\"+obj2.status)\n\n                      updateTaskStatus(obj2.text, obj2.status);\n                    }\n\n                    return obj2;\n                  }));\n                },\n                value: elm.text,\n                checked: elm.status,\n                class: \"optionbtn\",\n                name: \"option\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                style: {\n                  textDecoration: elm.status ? \"line-through\" : \"none\"\n                },\n                name: \"text\",\n                children: elm.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 275,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                title: \"edit item\",\n                class: \"editimg\",\n                src: \"https://img.icons8.com/color/48/000000/edit-property.png\",\n                onClick: () => editItem(elm.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 276,\n                columnNumber: 10\n              }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n                class: \"fa fa-trash\",\n                title: \"delete Item\",\n                onClick: () => deleteItem(ind, elm.text)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 277,\n                columnNumber: 10\n              }, this)]\n            }, ind, true, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 17\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"third_div\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            class: \"\",\n            value: \"0\",\n            name: \"\",\n            checked: showallCheck,\n            onChange: getTask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            class: \"showcomplete_txt\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"completed Task\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 2\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 1\n          }, this), tskList.map((val, key) => {\n            if (showallCheck === true) {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"showcheck\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"Task Name:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 14\n                }, this), \"\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: val.childtask_name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 320,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"\\xA0\\xA0Created Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 14\n                }, this), \"\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"h5\", {\n                  children: val.child_date\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 60\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 319,\n                columnNumber: 14\n              }, this);\n            } else {\n              return null;\n            }\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"newbtn\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"button\",\n            class: \"newbtn\",\n            value: \" +   Cancel\",\n            onClick: () => history.push(\"/\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 48\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 20\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChildList, \"sOtbJOkQpwGvadfKazNeI6C8j6w=\", false, function () {\n  return [useHistory];\n});\n\n_c = ChildList;\nexport default ChildList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChildList\");","map":{"version":3,"sources":["/home/sonia/projects/AdvancedToDo/client/src/components/ChildList.js"],"names":["react","React","useState","useHistory","useContext","ListContext","Axios","useRef","useEffect","ChildList","task","setTasks","items","setItems","toggleBtn","setToggleBtn","isEditItem","setIsEditItem","optStatus","setOptStatus","optionname","setOptionname","validatevalue","setValidatevalue","tskList","settskList","showallCheck","setShowallCheck","isChecked","setIsChecked","history","passData","val","length","name","toUpperCase","slice","deleteItem","id","task_del","updatedItems","filter","elm","ind","deleteTask","delete","updateTask","tasname","txt","put","original_txt","then","response","alert","addItem","map","elem","text","Date","now","status","inputRef","current","focus","submitTask","post","editItem","newEditItem","find","getTask","e","get","data","target","checked","updateTaskStatus","txtupdate","push","value","obj2","textDecoration","key","childtask_name","child_date"],"mappings":"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","sourcesContent":["import react from 'react';\nimport React, { useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport{useContext} from 'react';\nimport {ListContext} from '../context/ListContext.js'\nimport Axios from 'axios';\nimport  { useRef, useEffect } from 'react';\n\n\nconst ChildList=()=>{\n\n    const [task,setTasks] = useState(\"\");\n    const [items,setItems]=useState([]);\n    \n    const[toggleBtn,setToggleBtn]=useState(true);\n    const[isEditItem,setIsEditItem]=useState(null);\n    const[optStatus,setOptStatus]=useState(false)\n    const{optionname,setOptionname}=useContext(ListContext)\n    const[validatevalue,setValidatevalue]=useState(\"\")\n  const[tskList,settskList]=useState([])\n  const[showallCheck,setShowallCheck]=useState(\"\")\n  const [isChecked, setIsChecked] = useState(\"\");\n  \n    let history=useHistory();\n\n    \n   \n\n  function passData(val)\n  {\n  //setTasks(val)\n  if(val.length>0)\n  {\nvar name= val[0].toUpperCase()+val.slice(1)\n\n  }\n\nsetTasks(name);\n\nreturn val.length<15 ?'':setValidatevalue(\"max char 15\");\n\n\n\n\n  }\n\n\n  const deleteItem=(id,task_del)=>{\n    const updatedItems=items.filter((elm,ind)=>{\n        \n        return ind!==id;\n       \n                     } ) ;\n             deleteTask(task_del);\n             setItems(updatedItems);\n\n        } \n        const deleteTask=(task_del)=>{\n\n          Axios.delete(`http://localhost:4000/childdelete/${task_del}`);\n      \n          };\n\n\n          const updateTask=(tasname,txt)=>{\n            // alert(\"status=\"+status)\n             \n          \n          Axios.put(\"http://localhost:4000/childedit\",\n             {\n                tasname:tasname,original_txt:txt\n              \n              }).then((response)=>\n            \n             { alert(\"update\");\n          \n          }\n              \n             );\n            \n            \n          }\n\n\n\n\n\n\n\n\n\n  const addItem=()=>{\n    if(!task){\n    }else if(task && !toggleBtn){\n\n      setItems(\n        items.map((elem)=>{\n          if(elem.id===isEditItem){\n            setToggleBtn(true)\n          \n            setTasks(\" \")\n            alert(\"task=\"+task)\n            alert(\"elm=\"+elem.text)\n            updateTask(task,elem.text)\n            return{...elem,text:task}\n            \n          }\n          return elem;\n        })\n      \n      )\n    } else{\n    setItems([{id:Date.now(),text:task,status:false},...items]);\n\n    setTasks(\"\")\n   \n }\n }\n\n const inputRef = useRef();\n useEffect(() => {\n  inputRef.current.focus();\n\n                  })\n\n\n\n\n\n\n\n\n const submitTask=()=>{\n        alert(\"task=\"+task)\n        alert(\"opt=\"+optionname)\n  if(task){\n      Axios.post(\"http://localhost:4000/childinsert\",{\n      task:task,\n      text:optionname\n           \n   }).then(()=>{\n       alert(\"successful insert\")});\n       addItem();\n      // redirect();\n             }\n  //else{\n    // setTaskvalue(\"please fill the field\");\n     //inputRef.current.focus();\n      //}\n                        };  \n\n\n \nconst editItem=(id)=>{\n  \n  let newEditItem=items.find((elem)=>{\n    alert(\"elem=\"+elem.id)\n    alert(\"id=\"+id)\nreturn elem.id===id\n\n  });\n  setToggleBtn(false);\nsetTasks(newEditItem.text)\nsetIsEditItem(id)\n\n\n}\n\n\n\n    const getTask=(e)=>{\n    \n  \n  \n\n      // `http://localhost:4000/childdelete/${task_del}`);\n       \n       Axios.get(\"http://localhost:4000/showselected\").then((response)=>\n       settskList(response.data)\n      \n         )    \n    \n\n    setShowallCheck(e.target.checked)\n}\n\nconst updateTaskStatus=(txt,status)=>{\n  // alert(\"status=\"+status)\n   alert(\"hello hhhhxzx\")\n\nAxios.put(\"http://localhost:4000/Childupdate\",\n   { status:status,txtupdate:txt}).then((response)=>\n  \n   { alert(\"update\");\n\n}\n    \n   );\n  \n  \n}\n\n\n\n\n\n\n\n\n\n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          <button id = \"x\" class=\"closebtn\"  onClick={()=>{history.push( \"/\")}}> X</button>\n                   \n                          <label class=\"heading\"> {optionname}</label> <br></br> \n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\" class=\"todonametxt\" ref={inputRef}  title={validatevalue}   value={task}autoComplete=\"off\" maxLength=\"20\" onChange={(e)=>passData(e.target.value)}></input>&nbsp;&nbsp;\n                          </span>\n                          <span class=\"imgbutton\">\n                            {\n\n                              toggleBtn?<button onClick={submitTask}><img class=\"plusimage\" title=\"\" src=\"/image/plus.png\"></img></button>:<button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n                            }\n                            </span>\n                      \n                          { \n    \n    items.map((elm,ind)=>{\n  \n        return(\n          \n         \n                <div class=\"hhh\" key={ind}>\n\n                <input type=\"checkbox\"  name=\"taskname\"    onChange={(e)=>{\n                \n                 setItems(items.filter(obj2=>{\n                  \n\n                  if(obj2.id===elm.id){\n          \n                   obj2.status=e.target.checked\n\n  \n              // alert(\"obj2=\"+obj2.status)\n            \n               \n               updateTaskStatus(obj2.text,obj2.status)\n          \n                         \n                  }\n                  return obj2\n               \n                 \n                 })\n                 )}\n               \n                 } value={elm.text} checked={elm.status} class=\"optionbtn\" name=\"option\"\n                \n                 />\n                 \n                            \n                \n \n         <label style={{textDecoration:elm.status?\"line-through\":\"none\"} }  name=\"text\">{elm.text}</label>\n         <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={()=>editItem(elm.id)}/>\n         <i class=\"fa fa-trash\" title=\"delete Item\" onClick={()=>deleteItem(ind,elm.text)}></i>\n\n          \n              </div>\n            \n            \n             ) \n            \n            }\n            \n            \n            \n\n                \n            )\n                       \n}\n\n\n\n\n\n                          </div>\n                          <div class=\"third_div\">\n\n                          <input type=\"checkbox\" class=\"\" value=\"0\" name=\"\" checked={showallCheck}  onChange={getTask}\n\n/>\n\n\n\n\n<span class=\"showcomplete_txt\" >\n     \n <label >completed Task</label></span>\n {\n     \n     tskList.map((val,key)=>{\n         \n     if(showallCheck===true){\n        \n         return (\n             <div class=\"showcheck\">        \n             <h4>Task Name:</h4>&nbsp;&nbsp;<h5>{val.childtask_name}</h5>\n             <h4>&nbsp;&nbsp;Created Date:</h4>&nbsp;&nbsp;<h5>{val.child_date}</h5>\n             </div>\n             \n                 )\n             }\n                 else {\n \n                     return null\n                 }\n                                  }\n                      )\n }  \n\n\n\n\n </div>\n                          <span class=\"newbtn\"><input type=\"button\"  class=\"newbtn\" value= \" +   Cancel\"  onClick={()=>history.push(\"/\")} /></span> \n\n                         \n      \n      \n </div>\n </div>\n \n\n\n\n\n\n\n                   \n\n\n\n           \n          \n        \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default ChildList;"]},"metadata":{},"sourceType":"module"}