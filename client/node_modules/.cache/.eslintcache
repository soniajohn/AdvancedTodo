[{"/home/sonia/projects/AdvancedTodo/client/src/index.js":"1","/home/sonia/projects/AdvancedTodo/client/src/App.js":"2","/home/sonia/projects/AdvancedTodo/client/src/reportWebVitals.js":"3","/home/sonia/projects/AdvancedTodo/client/src/context/ListContext.js":"4","/home/sonia/projects/AdvancedTodo/client/src/components/ChildList.js":"5","/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js":"6","/home/sonia/projects/AdvancedTodo/client/src/components/Login.js":"7","/home/sonia/projects/AdvancedTodo/client/src/components/SignUp.js":"8"},{"size":500,"mtime":1632331171966,"results":"9","hashOfConfig":"10"},{"size":1338,"mtime":1632247461510,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1625477877982,"results":"12","hashOfConfig":"10"},{"size":657,"mtime":1629063767658,"results":"13","hashOfConfig":"10"},{"size":7555,"mtime":1632402400970,"results":"14","hashOfConfig":"10"},{"size":6059,"mtime":1632387962897,"results":"15","hashOfConfig":"10"},{"size":3194,"mtime":1629123095447,"results":"16","hashOfConfig":"10"},{"size":3352,"mtime":1629226851280,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ejqnau",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/home/sonia/projects/AdvancedTodo/client/src/index.js",[],["38","39"],"/home/sonia/projects/AdvancedTodo/client/src/App.js",[],"/home/sonia/projects/AdvancedTodo/client/src/reportWebVitals.js",[],"/home/sonia/projects/AdvancedTodo/client/src/context/ListContext.js",[],"/home/sonia/projects/AdvancedTodo/client/src/components/ChildList.js",["40","41","42","43","44","45","46","47","48","49","50","51"],"/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js",["52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72"],"import react from 'react';\nimport React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { useContext } from 'react';\nimport Axios from 'axios';\nimport { ListContext } from '../context/ListContext.js'\nimport { useRef, useEffect } from 'react';\nimport { subnetMatch } from 'ipaddr.js';\n\n\n\n\n\nconst Tasklist = () => {\n\n\n  const { username, SetUsername, userid, SetUserid, childtaskid, Setchildtaskid } = useContext(ListContext);\n  const { optionname, setOptionname } = useContext(ListContext)\n  const [task, setTasks] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [toggleBtn, setToggleBtn] = useState(true);\n  const [isEditItem, setIsEditItem] = useState(null);\n  const [optStatus, setOptStatus] = useState(false);\n  const [taskValue, setTaskvalue] = useState(\"\")\n  const [validatevalue, setValidatevalue] = useState(\"\")\n  const [fetchlist, setFetchlist] = useState([])\n  const [showList, setshowList] = useState([])\n\n  let history = useHistory();\n\n  const [usertasklist, setUsertasklist] = useState([])\n\n\n\n\n\n\n\n\n  function passData(val) {\n    if (val.length > 0) {\n      var name = val[0].toUpperCase() + val.slice(1)\n\n    }\n\n    setTasks(name);\n\n    return val.length < 15 ? '' : setValidatevalue(\"max char 15\");\n\n  }\n\n\n//////\n  const submitTask = () => {\n\n    if (task) {\n\n\n      Axios.post(`http://localhost:4000/users/${userid}/todolists`, {\n\n        task: task\n      }).then((response) => {\n        \n        \n        alert(\"successful insert\")\n      });\n      addItem();\n\n\n\n    }\n    else {\n      setTaskvalue(\"please fill the field\");\n      inputRef.current.focus();\n    }\n  };\n\n\n\n  const inputRef = useRef();\n  useEffect(() => {\n    inputRef.current.focus();\n\n  })\n////////\n\n\n\n  const deleteItem = (id,todolist_id) => {\n    alert(todolist_id)\n    const updatedItems = items.filter((elm, ind) => {\n\n      return ind !== id;\n\n    });\n    alert(\"todoid=\"+todolist_id)\n    deleteTask(todolist_id);\n    setItems(updatedItems);\n\n  }\n\n\n\n\n\n\n\n  const updateTask = (tasname, todolistid) => {\n\nalert(tasname)\n\n    Axios.put(`http://localhost:4000/users/${userid}/todolists/${todolistid}`,\n      {\n        tasname: tasname\n\n      }).then((response) => {\n        //alert(\"update\");\n\n      }\n\n      );\n\n\n  }\n\n\n\n\n\n  useEffect(() => {\n\n    Axios.get(`http://localhost:4000/users/${userid}/todolists`,\n\n\n      {}\n\n    ).then(response => {\n\n      var todoid = response.data[0].Todoid\n      \n  \n      setItems(response.data)\n   \n    })\n      .catch(err => {\n        console.log(err)\n\n\n      })\n\n\n  }, []);\n\n\n\n\n\n\n\n  const deleteTask = (todolist_id, userid) => {\n  alert(\"id=\"+todolist_id)\n    Axios.delete(`http://localhost:4000/users/${userid}/todolists/${todolist_id}`);\n\n  };\n\n\n  const addItem = () => {\n    if (!task) {\n    } else if (task && !toggleBtn) {\n\n      setItems(\n        items.map((elem) => {\n\n          if (elem.Todoid === isEditItem) {\n            setToggleBtn(true)\n\n            setTasks(\" \")\n            updateTask(task, elem.Todoid)\n            return { ...elem, Todoname: task }\n\n          }\n          return elem;\n        })\n\n      )\n    } else {\n     \n\n\n      \n      setItems([{ Todoname: task, status: false }, ...items]);\n\n      setTasks(\"\");\n      setValidatevalue(\"\");\n\n    }\n  }\n\n\n\n\n\n\n  const editItem = (id) => {\n\n    let newEditItem = items.find((elem) => {\n      \n      return elem.Todoid === id\n\n    });\n    setToggleBtn(false);\n  \n    setTasks(newEditItem.Todoname)\n    \n    setIsEditItem(id)\n\n\n  }\n\n\n  const redirectTask = () => {\n\n\n\n    history.push(\"/users/:userid/Todolists/:todolistId/tasks\");\n\n\n\n  }\n\n\n\n\n  return (\n\n    <react.Fragment>\n\n      <div class=\"parent_div\">\n        <div class=\"container\">\n\n\n          <div class=\"secondcontainer\">\n            <button id=\"logout\" class=\"closebtn\" title=\"Log out\" onClick={() => { history.push(\"/\") }}> ...</button>\n            <label class=\"heading\"> Hi...{username}</label> <br></br>\n\n            <span class=\"thirdcontainer\">\n              <input type=\"text\" ref={inputRef} class=\"todonametxt\" title={validatevalue} value={task} autoComplete=\"off\" maxLength=\"20\" onChange={(e) => passData(e.target.value)}></input>&nbsp;&nbsp;\n            </span>\n\n            <span class=\"imgbutton\">\n              {\n\n                toggleBtn ? <button onClick={submitTask}><img class=\"plusimage\" src=\"/image/plus.png\"></img></button> : <button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n              }\n            </span>\n\n\n            {\n\n              items.map((elm, ind) => {\n\n                return (\n\n\n                  <div class=\"insert\" key={ind}>\n\n                    <input type=\"radio\" name=\"taskname\" onChange={(e) => {\n\n                      setItems(items.filter(obj2 => {\n\n\n                        if (obj2.childtodo_id === elm.childtodo_id) {\n\n                          obj2.status = e.target.checked\n\n                          setOptionname(elm.Todoname);\n                          // (elm.Todoid)\n                          Setchildtaskid(elm.Todoid)\n                          //setOptionname(items)\n\n\n                          //   updateTaskStatus(obj2.text,obj2.status,obj2.Todoid)\n\n\n                        }\n                        return obj2\n\n\n                      })\n                      )\n                    }\n\n                    } value={elm.Todoname} checked={elm.status} class=\"optionbtn\" name=\"option\" onClick={redirectTask}\n\n                    />\n\n\n\n\n                    <label name=\"text\">{elm.Todoname}</label>\n                    \n                    <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={() => editItem(elm.Todoid)} />\n                    <i class=\"fa fa-trash\" title=\"delete Item\" onClick={() => deleteItem(ind, elm.Todoid)}></i>\n\n\n                  </div>\n\n\n                )\n\n              }\n\n\n\n\n\n              )\n\n            }\n\n\n          </div>\n\n        </div>\n\n\n      </div>\n\n\n\n    </react.Fragment>\n\n\n\n  )\n\n}\nexport default Tasklist;","/home/sonia/projects/AdvancedTodo/client/src/components/Login.js",["73","74","75","76","77","78","79","80"],"import react, { useRef, useState, useEffect } from 'react';\n\nimport Axios from 'axios';\nimport { Redirect } from 'react-router-dom';\n\nimport Tasklist from './TaskList';\nimport { useHistory } from \"react-router-dom\";\nimport { ListContext } from '../context/ListContext.js'\nimport { useContext } from 'react';\n\n\n\n\n\nconst Login = () => {\n\n  const { username, SetUsername, userid, SetUserid } = useContext(ListContext);\n  const [loginstatus, SetLoginstatus] = useState(\"\")\n  const [textstatus, Settextstatus] = useState(\"\")\n\n  let history = useHistory();\n\n  const [user, setUser] = useState({\n\n    email: \"\", password: \"\"\n\n  });\n\n\n  let name, value, bool;\n  const handleInputs = (e) => {\n\n    name = e.target.name;\n    \n    value = e.target.value;\n    if (name === \"email\") {\n      const emailRegex = /\\S+@\\S+\\.\\S+/;\n      if (emailRegex.test(value)) {\n        Settextstatus(\"\")\n\n\n      } else {\n        Settextstatus(\"not valid email\");\n\n      }\n\n    }\n\n    setUser({ ...user, [name]: value });\n\n  }\n\n  const loginData = () => {\n    const { email, password } = user;\n\n    if (user) {\n\n      \n      Axios.post(`http://localhost:4000/users/todolists`, {\n\n        email, password\n\n      }).then((response) => {\n\n        if (response.data.message) {\n          Settextstatus(\"\")\n          SetLoginstatus(response.data.message)\n          \n        }\n\n\n        else\n\n          if (response.data[0].email) {\n            var user = response.data[0].f_name\n            \n            var userid = response.data[0].user_id\n          \n\n            SetUsername(user);\n            SetUserid(userid)\n\n            history.push('/users/:user/todolists')\n          }\n\n      });\n\n    }\n    \n\n  };\n\n\n\n\n\n\n\n\n  const cancelData = () => {\n    setUser({ email: \" \", password: \" \" })\n    SetLoginstatus(\" \")\n    Settextstatus(\" \")\n\n  }\n\n\n  return (\n\n    <react.Fragment>\n\n      <div class=\"parent_div\">\n        <div class=\"container\">\n\n\n          <div class=\"secondcontainer\">\n            <img class=\"todoimg\" src=\"/image/todoicon.jpeg\"></img>\n            &nbsp;&nbsp;&nbsp;<label class=\"heading\">ToDo App</label> <br></br> <br></br>\n            <label class=\"todolbl\" >Login</label><br></br>\n            <label class=\"todolbl2\" >Login with E-mail</label><br></br>\n            <span class=\"thirdcontainer\">\n              <input type=\"text\" name=\"email\" class=\"todonametxt\" value={user.email} autoComplete=\"off\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n            </span><br></br>\n            <p>{textstatus}</p>\n            <label class=\"todolbl\" >Password</label><br></br>\n\n            <span class=\"thirdcontainer\">\n              <input type=\"password\" name=\"password\" class=\"todopasstxt\" value={user.password} autoComplete=\"off\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n            </span>\n            <p>{loginstatus}</p>\n            <div class=\"btnclass\">\n              <button class=\"todobtn\" onClick={loginData}>SignIn</button>&nbsp;&nbsp;<button class=\"todobtn\" onClick={cancelData}>Reset</button>\n              <a href=\"/users\" class=\"signup\">SignUp</a></div>\n\n\n\n\n          </div>\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n    </react.Fragment>\n\n\n\n  )\n\n}\nexport default Login;\n\n\n\n\n\n\n","/home/sonia/projects/AdvancedTodo/client/src/components/SignUp.js",["81","82","83","84","85","86","87"],"import react from 'react';\nimport React, { useState } from \"react\";\nimport Axios from 'axios';\n\n\n\n\n\nconst SignUp = () => {\n\n  const [txtvalidate, Settxtvalidate] = useState(\"\")\n\n  const [user, setUser] = useState({\n\n    fname: \"\", lname: \"\", email: \"\", password: \"\", cpassword: \"\"\n\n  });\n\n  let name, value;\n  const handleInputs = (e) => {\n\n    name = e.target.name;\n    value = e.target.value;\n\n    ///////////////////////\n\n\n\n\n\n    ///////////////////////\n\n    setUser({ ...user, [name]: value });\n\n  }\n\n\n\n\n  const registerData = () => {\n    const { fname, lname, email, password, cpassword } = user;\n\n    if (user) {\n\n\n      Axios.post(\"http://localhost:4000/users\", {\n\n        fname, lname, email, password, cpassword\n\n      }).then(() => {\n\n        alert(\"successful insert\")\n      });\n\n    }\n    cancelData();\n\n  };\n\n  const cancelData = () => {\n    setUser({ fname: \"\", lname: \"\", email: \"\", password: \"\", cpassword: \"\" })\n  }\n\n\n\n\n\n\n\n\n  function passData(val, name) {\n    alert(name)\n  }\n\n\n\n\n  return (\n\n    <react.Fragment>\n\n      <div class=\"parent_div\">\n        <div class=\"container\">\n\n\n          <div class=\"secondcontainer\">\n\n            &nbsp;&nbsp;&nbsp;<label class=\"heading\">SignUp</label> <br></br> <br></br>\n\n\n\n            <span class=\"thirdcontainer\">\n              <img class=\"userpic\" src=\"/image/usericon.jpeg\"></img>&nbsp;\n              <input type=\"text\" name=\"fname\" value={user.fname} class=\"todonametxt\" placeholder=\"First Name .......\" autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n            </span><br></br>\n\n\n            <span class=\"thirdcontainer\">\n              <img class=\"userpic\" src=\"/image/usericon.jpeg\"></img>&nbsp;\n\n              <input type=\"text\" name=\"lname\" value={user.lname} class=\"todonametxt\" placeholder=\"Second Name.....\" autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input><br></br>\n            </span>\n\n            <span class=\"thirdcontainer\">\n              <img class=\"mailpic\" src=\"/image/mails.jpeg\"></img>&nbsp;\n              <input type=\"text\" name=\"email\" value={user.email} class=\"todonametxt\" placeholder=\"E_mail.....\" autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs}></input>&nbsp;&nbsp;\n            </span><br></br>\n\n\n\n            <span class=\"thirdcontainer\">\n              <img class=\"mailpic\" src=\"/image/lock.jpeg\"></img>&nbsp;\n              <input type=\"text\" name=\"password\" value={user.password} class=\"todonametxt\" placeholder=\"Password.....\" autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs}></input>\n            </span><br></br>\n            <p>{txtvalidate}</p>\n\n            <span class=\"thirdcontainer\">\n              <img class=\"mailpic\" src=\"/image/lock.jpeg\"></img>&nbsp;\n              <input type=\"text\" name=\"cpassword\" value={user.cpassword} class=\"todonametxt\" placeholder=\"Re_enetr Password.....\" autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n            </span>\n            <p>{txtvalidate}</p>\n            <div class=\"btnclass\">\n              <button class=\"todobtn\" onClick={registerData}>Register</button>&nbsp;&nbsp;<button class=\"todobtn\" onClick={cancelData}>Reset</button>\n              <a href=\"/\" class=\"signup\">Login</a>\n            </div>\n\n\n\n\n          </div>\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n    </react.Fragment>\n\n\n\n  )\n\n}\nexport default SignUp;",{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","severity":1,"message":"93","line":18,"column":23,"nodeType":"94","messageId":"95","endLine":18,"endColumn":36},{"ruleId":"92","severity":1,"message":"96","line":22,"column":11,"nodeType":"94","messageId":"95","endLine":22,"endColumn":19},{"ruleId":"92","severity":1,"message":"97","line":22,"column":21,"nodeType":"94","messageId":"95","endLine":22,"endColumn":32},{"ruleId":"92","severity":1,"message":"98","line":22,"column":42,"nodeType":"94","messageId":"95","endLine":22,"endColumn":51},{"ruleId":"92","severity":1,"message":"99","line":22,"column":65,"nodeType":"94","messageId":"95","endLine":22,"endColumn":79},{"ruleId":"92","severity":1,"message":"100","line":23,"column":19,"nodeType":"94","messageId":"95","endLine":23,"endColumn":29},{"ruleId":"101","severity":1,"message":"102","line":207,"column":6,"nodeType":"103","endLine":207,"endColumn":8,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":271,"column":58,"nodeType":"107","endLine":271,"endColumn":112},{"ruleId":"105","severity":1,"message":"106","line":271,"column":156,"nodeType":"107","endLine":271,"endColumn":255},{"ruleId":"108","severity":1,"message":"109","line":315,"column":116,"nodeType":"110","messageId":"111","endLine":315,"endColumn":129},{"ruleId":"112","severity":1,"message":"113","line":322,"column":70,"nodeType":"114","messageId":"115","endLine":322,"endColumn":72},{"ruleId":"105","severity":1,"message":"106","line":323,"column":21,"nodeType":"107","endLine":323,"endColumn":168},{"ruleId":"92","severity":1,"message":"116","line":3,"column":10,"nodeType":"94","messageId":"95","endLine":3,"endColumn":14},{"ruleId":"92","severity":1,"message":"117","line":8,"column":10,"nodeType":"94","messageId":"95","endLine":8,"endColumn":21},{"ruleId":"92","severity":1,"message":"97","line":17,"column":21,"nodeType":"94","messageId":"95","endLine":17,"endColumn":32},{"ruleId":"92","severity":1,"message":"98","line":17,"column":42,"nodeType":"94","messageId":"95","endLine":17,"endColumn":51},{"ruleId":"92","severity":1,"message":"118","line":17,"column":53,"nodeType":"94","messageId":"95","endLine":17,"endColumn":64},{"ruleId":"92","severity":1,"message":"119","line":18,"column":11,"nodeType":"94","messageId":"95","endLine":18,"endColumn":21},{"ruleId":"92","severity":1,"message":"120","line":23,"column":10,"nodeType":"94","messageId":"95","endLine":23,"endColumn":19},{"ruleId":"92","severity":1,"message":"121","line":23,"column":21,"nodeType":"94","messageId":"95","endLine":23,"endColumn":33},{"ruleId":"92","severity":1,"message":"122","line":24,"column":10,"nodeType":"94","messageId":"95","endLine":24,"endColumn":19},{"ruleId":"92","severity":1,"message":"123","line":26,"column":10,"nodeType":"94","messageId":"95","endLine":26,"endColumn":19},{"ruleId":"92","severity":1,"message":"124","line":26,"column":21,"nodeType":"94","messageId":"95","endLine":26,"endColumn":33},{"ruleId":"92","severity":1,"message":"125","line":27,"column":10,"nodeType":"94","messageId":"95","endLine":27,"endColumn":18},{"ruleId":"92","severity":1,"message":"126","line":27,"column":20,"nodeType":"94","messageId":"95","endLine":27,"endColumn":31},{"ruleId":"92","severity":1,"message":"127","line":31,"column":10,"nodeType":"94","messageId":"95","endLine":31,"endColumn":22},{"ruleId":"92","severity":1,"message":"128","line":31,"column":24,"nodeType":"94","messageId":"95","endLine":31,"endColumn":39},{"ruleId":"92","severity":1,"message":"129","line":139,"column":11,"nodeType":"94","messageId":"95","endLine":139,"endColumn":17},{"ruleId":"101","severity":1,"message":"130","line":152,"column":6,"nodeType":"103","endLine":152,"endColumn":8,"suggestions":"131"},{"ruleId":"105","severity":1,"message":"106","line":253,"column":58,"nodeType":"107","endLine":253,"endColumn":103},{"ruleId":"105","severity":1,"message":"106","line":253,"column":147,"nodeType":"107","endLine":253,"endColumn":246},{"ruleId":"108","severity":1,"message":"109","line":293,"column":83,"nodeType":"110","messageId":"111","endLine":293,"endColumn":96},{"ruleId":"105","severity":1,"message":"106","line":302,"column":21,"nodeType":"107","endLine":302,"endColumn":162},{"ruleId":"92","severity":1,"message":"132","line":1,"column":17,"nodeType":"94","messageId":"95","endLine":1,"endColumn":23},{"ruleId":"92","severity":1,"message":"133","line":1,"column":35,"nodeType":"94","messageId":"95","endLine":1,"endColumn":44},{"ruleId":"92","severity":1,"message":"134","line":4,"column":10,"nodeType":"94","messageId":"95","endLine":4,"endColumn":18},{"ruleId":"92","severity":1,"message":"135","line":6,"column":8,"nodeType":"94","messageId":"95","endLine":6,"endColumn":16},{"ruleId":"92","severity":1,"message":"96","line":17,"column":11,"nodeType":"94","messageId":"95","endLine":17,"endColumn":19},{"ruleId":"92","severity":1,"message":"136","line":17,"column":34,"nodeType":"94","messageId":"95","endLine":17,"endColumn":40},{"ruleId":"92","severity":1,"message":"137","line":30,"column":20,"nodeType":"94","messageId":"95","endLine":30,"endColumn":24},{"ruleId":"105","severity":1,"message":"106","line":117,"column":13,"nodeType":"107","endLine":117,"endColumn":61},{"ruleId":"92","severity":1,"message":"138","line":11,"column":23,"nodeType":"94","messageId":"95","endLine":11,"endColumn":37},{"ruleId":"92","severity":1,"message":"139","line":71,"column":12,"nodeType":"94","messageId":"95","endLine":71,"endColumn":20},{"ruleId":"105","severity":1,"message":"106","line":93,"column":15,"nodeType":"107","endLine":93,"endColumn":63},{"ruleId":"105","severity":1,"message":"106","line":99,"column":15,"nodeType":"107","endLine":99,"endColumn":63},{"ruleId":"105","severity":1,"message":"106","line":105,"column":15,"nodeType":"107","endLine":105,"endColumn":60},{"ruleId":"105","severity":1,"message":"106","line":112,"column":15,"nodeType":"107","endLine":112,"endColumn":59},{"ruleId":"105","severity":1,"message":"106","line":118,"column":15,"nodeType":"107","endLine":118,"endColumn":59},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'setOptionname' is assigned a value but never used.","Identifier","unusedVar","'username' is assigned a value but never used.","'SetUsername' is assigned a value but never used.","'SetUserid' is assigned a value but never used.","'Setchildtaskid' is assigned a value but never used.","'setFetchid' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'childtaskid' and 'userid'. Either include them or remove the dependency array.","ArrayExpression",["142"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Link' is defined but never used.","'subnetMatch' is defined but never used.","'childtaskid' is assigned a value but never used.","'optionname' is assigned a value but never used.","'optStatus' is assigned a value but never used.","'setOptStatus' is assigned a value but never used.","'taskValue' is assigned a value but never used.","'fetchlist' is assigned a value but never used.","'setFetchlist' is assigned a value but never used.","'showList' is assigned a value but never used.","'setshowList' is assigned a value but never used.","'usertasklist' is assigned a value but never used.","'setUsertasklist' is assigned a value but never used.","'todoid' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["143"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'Redirect' is defined but never used.","'Tasklist' is defined but never used.","'userid' is assigned a value but never used.","'bool' is defined but never used.","'Settxtvalidate' is assigned a value but never used.","'passData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},"Update the dependencies array to be: [childtaskid, userid]",{"range":"148","text":"149"},"Update the dependencies array to be: [userid]",{"range":"150","text":"151"},[3642,3644],"[childtaskid, userid]",[2545,2547],"[userid]"]