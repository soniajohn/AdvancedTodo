[{"/home/sonia/projects/AdvancedTodo/client/src/index.js":"1","/home/sonia/projects/AdvancedTodo/client/src/App.js":"2","/home/sonia/projects/AdvancedTodo/client/src/reportWebVitals.js":"3","/home/sonia/projects/AdvancedTodo/client/src/context/ListContext.js":"4","/home/sonia/projects/AdvancedTodo/client/src/components/ChildList.js":"5","/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js":"6","/home/sonia/projects/AdvancedTodo/client/src/components/Login.js":"7","/home/sonia/projects/AdvancedTodo/client/src/components/SignUp.js":"8"},{"size":500,"mtime":1625477877982,"results":"9","hashOfConfig":"10"},{"size":1631,"mtime":1627645204326,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1625477877982,"results":"12","hashOfConfig":"10"},{"size":566,"mtime":1627636639122,"results":"13","hashOfConfig":"10"},{"size":7080,"mtime":1626982304514,"results":"14","hashOfConfig":"10"},{"size":7770,"mtime":1627650167999,"results":"15","hashOfConfig":"10"},{"size":3726,"mtime":1627650250357,"results":"16","hashOfConfig":"10"},{"size":4288,"mtime":1627582134011,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"i1q38c",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"/home/sonia/projects/AdvancedTodo/client/src/index.js",[],["37","38"],"/home/sonia/projects/AdvancedTodo/client/src/App.js",[],"/home/sonia/projects/AdvancedTodo/client/src/reportWebVitals.js",[],"/home/sonia/projects/AdvancedTodo/client/src/context/ListContext.js",[],"/home/sonia/projects/AdvancedTodo/client/src/components/ChildList.js",["39","40","41","42","43"],"import react from 'react';\nimport React, { useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport{useContext} from 'react';\nimport {ListContext} from '../context/ListContext.js'\nimport Axios from 'axios';\nimport  { useRef, useEffect } from 'react';\n\n\nconst ChildList=()=>{\n\n    const [task,setTasks] = useState(\"\");\n    const [items,setItems]=useState([]);\n    \n    const[toggleBtn,setToggleBtn]=useState(true);\n    const[isEditItem,setIsEditItem]=useState(null);\n    \n    const{optionname,setOptionname}=useContext(ListContext)\n    const[validatevalue,setValidatevalue]=useState(\"\")\n    const[tskList,settskList]=useState([])\n    const[showallCheck,setShowallCheck]=useState(\"\")\n    \n  \n    let history=useHistory();\n\n    \n   \n\n  function passData(val)\n  {\n  \n  if(val.length>0)\n  {\n    var name= val[0].toUpperCase()+val.slice(1)\n\n   }\n\nsetTasks(name);\n\n\nreturn val.length<15 ?'':setValidatevalue(\"max char 15\");\n\n}\n\n\n  const deleteItem=(id,task_del)=>{\n    const updatedItems=items.filter((elm,ind)=>{\n        \n        return ind!==id;\n       \n                     } ) ;\n             deleteTask(task_del);\n             setItems(updatedItems);\n\n          } \n\n\n        const deleteTask=(task_del)=>{\n\n          Axios.delete(`http://localhost:4000/childdelete/${task_del}`);\n      \n          };\n\n\n         \n          const updateTask=(tasname,txt)=>{\n            \n                       \n          Axios.put(\"http://localhost:4000/childedit\",\n             {\n                tasname:tasname,original_txt:txt\n              \n              }).then((response)=>\n            \n             { alert(\"update\");\n          \n            }\n              \n             );\n            \n            \n           }\n\n\n\n\n\n\n  const addItem=()=>{\n    if(!task){\n    }else if(task && !toggleBtn){\n\n      setItems(\n        items.map((elem)=>{\n          if(elem.id===isEditItem){\n             setToggleBtn(true)\n          \n              setTasks(\" \")\n            \n            \n              updateTask(task,elem.text)\n              return{...elem,text:task}\n            \n                           }\n             return elem;\n            })\n      \n      )\n    } else{\n    setItems([{id:Date.now(),text:task,status:false},...items]);\n\n    setTasks(\"\")\n   \n   } }\n\n\n\n const inputRef = useRef();\n useEffect(() => {\n  inputRef.current.focus();\n\n                  })\n\n\n\n\n const submitTask=()=>{\n        \n        \n  if(task){\n      Axios.post(\"http://localhost:4000/childinsert\",{\n      task:task,\n      text:optionname\n           \n   }).then(()=>{\n       alert(\"successful insert\")});\n       addItem();\n      \n             }\n       \n      \n                        };  \n\n\n \nconst editItem=(id)=>{\n  \n    let newEditItem=items.find((elem)=>{\n    \n    \n    return elem.id===id\n\n             });\n  setToggleBtn(false);\nsetTasks(newEditItem.text)\nsetIsEditItem(id)\n\n\n}\n\n\n\n    const getTask=(e)=>{\n     \n\n       Axios.get(\"http://localhost:4000/showselected\").then((response)=>\n       settskList(response.data)\n      \n         )    \n    \n\n        setShowallCheck(e.target.checked)\n                       }\n\n\n\nconst updateTaskStatus=(txt,status)=>{\n     \nAxios.put(\"http://localhost:4000/Childupdate\",\n   { status:status,txtupdate:txt}).then((response)=>\n  \n   { alert(\"update\");\n\n   }\n    \n   );\n   \n  }\n\n\n\n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          <button id = \"x\" class=\"closebtn\"  onClick={()=>{history.push( \"/\")}}> X</button>\n                   \n                          <label class=\"heading\"> {optionname}</label> <br></br> \n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\" class=\"todonametxt\" ref={inputRef}  title={validatevalue}   value={task}autoComplete=\"off\" maxLength=\"20\" onChange={(e)=>passData(e.target.value)}></input>&nbsp;&nbsp;\n                          </span>\n                          <span class=\"imgbutton\">\n                            {\n\n                              toggleBtn?<button onClick={submitTask}><img class=\"plusimage\" title=\"\" src=\"/image/plus.png\"></img></button>:<button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n                            }\n                            </span>\n                      \n                          { \n    \n    items.map((elm,ind)=>{\n  \n        return(\n          \n         \n                <div class=\"hhh\" key={ind}>\n\n                <input type=\"checkbox\"  name=\"taskname\"    onChange={(e)=>{\n                \n                 setItems(items.filter(obj2=>{\n                  \n\n                  if(obj2.id===elm.id){\n          \n                   obj2.status=e.target.checked\n\n  \n            \n               \n               updateTaskStatus(obj2.text,obj2.status)\n          \n                         \n                  }\n                  return obj2\n               \n                 \n                 })\n                 )}\n               \n                 } value={elm.text} checked={elm.status} class=\"optionbtn\" name=\"option\"\n                \n                 />\n                 \n                            \n                \n \n         <label style={{textDecoration:elm.status?\"line-through\":\"none\"} }  name=\"text\">{elm.text}</label>\n         <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={()=>editItem(elm.id)}/>\n         <i class=\"fa fa-trash\" title=\"delete Item\" onClick={()=>deleteItem(ind,elm.text)}></i>\n\n          \n              </div>\n            \n            \n             ) \n            \n            }\n            \n            \n            \n\n                \n            )\n                       \n}\n\n\n\n\n\n                          </div>\n                          <div class=\"third_div\">\n\n                          <input type=\"checkbox\" class=\"\" value=\"0\" name=\"\" checked={showallCheck}  onChange={getTask}\n\n/>\n\n\n\n\n<span class=\"showcomplete_txt\" >\n     \n <label >completed Task</label></span>\n {\n     \n     tskList.map((val,key)=>{\n         \n     if(showallCheck===true){\n        \n         return (\n             <div class=\"showcheck\">        \n             <h4>Task Name:</h4>&nbsp;&nbsp;<h5>{val.childtask_name}</h5>\n             <h4>&nbsp;&nbsp;Created Date:</h4>&nbsp;&nbsp;<h5>{val.child_date}</h5>\n             </div>\n             \n                 )\n             }\n                 else {\n \n                     return null\n                 }\n                                  }\n                      )\n }  \n\n\n\n\n </div>\n                  <span class=\"newbtn\"><input type=\"button\"  class=\"newbtn\" value= \" +   Cancel\"  onClick={()=>history.push(\"/\")} /></span> \n\n                         \n      \n      \n </div>\n </div>\n     \n            \n        \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default ChildList;","/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js",["44","45","46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61","62"],"/home/sonia/projects/AdvancedTodo/client/src/components/Login.js",["63","64","65","66","67"],"/home/sonia/projects/AdvancedTodo/client/src/components/SignUp.js",["68","69","70","71","72","73"],"import react from 'react';\nimport React, { useState} from \"react\";\nimport Axios from 'axios';\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\nconst SignUp=()=>{\n\n\n\n  const [user,setUser] = useState({\n\nfname:\"\",lname:\"\",email:\"\",password:\"\",cpassword:\"\"\n\n  });\n  \n  let name,value;\n  const handleInputs=(e)=>{\n\n    name=e.target.name;\n    value=e.target.value;\n    \n       \n\n    setUser({...user,[name]:value});\n\n  }\n  \n  const registerData=()=>{\n    const {fname,lname,email,password,cpassword}=user;\n      \n    if(user){\n    \n              \n      Axios.post(\"http://localhost:4000/signupinsert\",{\n      \n      fname,lname,email,password,cpassword\n           \n      }).then(()=>{\n       \n        alert(\"successful insert\")});\n   \n                  } \n             cancelData();   \n                \n       };  \n\n     const cancelData = () => { \n     setUser({fname:\"\",lname:\"\",email:\"\",password:\"\",cpassword:\"\"})\n      }\n\n\n\n\n\n\n\n\n  function passData(val,name)\n    \n  {\n    alert(name)\n  }\n\n\n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          \n                          &nbsp;&nbsp;&nbsp;<label class=\"heading\">SignUp</label> <br></br> <br></br>\n                          \n                         \n                          \n                        <span class=\"thirdcontainer\">\n                        <img  class=\"userpic\" src=\"/image/usericon.jpeg\"></img>&nbsp;\n                          <input type=\"text\"  name=\"fname\" value={user.fname} class=\"todonametxt\" placeholder=\"First Name.....\"   autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n                          </span><br></br>\n                         \n                          <span class=\"thirdcontainer\">\n                             <img  class=\"userpic\" src=\"/image/usericon.jpeg\"></img>&nbsp;\n                          \n                          <input type=\"text\"  name=\"lname\" value={user.lname} class=\"todonametxt\" placeholder=\"Second Name.....\"      autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input><br></br>\n                          </span>\n                          \n                          <span class=\"thirdcontainer\">\n                          <img  class=\"mailpic\" src=\"/image/mails.jpeg\"></img>&nbsp;\n                          <input type=\"text\" name=\"email\" value={user.email}  class=\"todonametxt\" placeholder=\"E_mail.....\"  autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs}></input>&nbsp;&nbsp;\n                          </span><br></br>\n                        \n                          \n                          \n                        <span class=\"thirdcontainer\">\n                        <img  class=\"mailpic\" src=\"/image/lock.jpeg\"></img>&nbsp;\n                          <input type=\"text\"  name=\"password\" value={user.password} class=\"todonametxt\" placeholder=\"Password.....\"  autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs}></input>\n                          </span><br></br>\n                          \n                          \n                          <span class=\"thirdcontainer\">\n                          <img  class=\"mailpic\" src=\"/image/lock.jpeg\"></img>&nbsp;\n                            <input type=\"text\"  name=\"cpassword\" value={user.cpassword} class=\"todonametxt\" placeholder=\"Re_enetr Password.....\"    autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n                            </span>\n                          <div class=\"btnclass\">\n                          <button  class=\"todobtn\" onClick={registerData}>Register</button>&nbsp;&nbsp;<button class=\"todobtn\" onClick={cancelData }>Reset</button>\n                          <a href=\"/logininsert\" class=\"signup\">Login</a>\n                          </div>\n                          \n                        \n                    \n                          \n                          </div>\n                         \n          \n                   </div>\n                   \n                      \n          \n           </div>\n           \n          \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default SignUp;",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":18,"column":22,"nodeType":"80","messageId":"81","endLine":18,"endColumn":35},{"ruleId":"82","severity":1,"message":"83","line":213,"column":70,"nodeType":"84","endLine":213,"endColumn":124},{"ruleId":"82","severity":1,"message":"83","line":213,"column":166,"nodeType":"84","endLine":213,"endColumn":265},{"ruleId":"85","severity":1,"message":"86","line":248,"column":76,"nodeType":"87","messageId":"88","endLine":248,"endColumn":89},{"ruleId":"82","severity":1,"message":"83","line":256,"column":10,"nodeType":"84","endLine":256,"endColumn":144},{"ruleId":"78","severity":1,"message":"89","line":3,"column":9,"nodeType":"80","messageId":"81","endLine":3,"endColumn":13},{"ruleId":"78","severity":1,"message":"90","line":16,"column":18,"nodeType":"80","messageId":"81","endLine":16,"endColumn":29},{"ruleId":"78","severity":1,"message":"91","line":16,"column":37,"nodeType":"80","messageId":"81","endLine":16,"endColumn":46},{"ruleId":"78","severity":1,"message":"92","line":17,"column":11,"nodeType":"80","messageId":"81","endLine":17,"endColumn":21},{"ruleId":"78","severity":1,"message":"93","line":22,"column":11,"nodeType":"80","messageId":"81","endLine":22,"endColumn":20},{"ruleId":"78","severity":1,"message":"94","line":22,"column":21,"nodeType":"80","messageId":"81","endLine":22,"endColumn":33},{"ruleId":"78","severity":1,"message":"95","line":23,"column":11,"nodeType":"80","messageId":"81","endLine":23,"endColumn":20},{"ruleId":"78","severity":1,"message":"96","line":25,"column":11,"nodeType":"80","messageId":"81","endLine":25,"endColumn":20},{"ruleId":"78","severity":1,"message":"97","line":25,"column":21,"nodeType":"80","messageId":"81","endLine":25,"endColumn":33},{"ruleId":"78","severity":1,"message":"98","line":26,"column":11,"nodeType":"80","messageId":"81","endLine":26,"endColumn":19},{"ruleId":"78","severity":1,"message":"99","line":26,"column":20,"nodeType":"80","messageId":"81","endLine":26,"endColumn":31},{"ruleId":"78","severity":1,"message":"100","line":29,"column":11,"nodeType":"80","messageId":"81","endLine":29,"endColumn":23},{"ruleId":"78","severity":1,"message":"101","line":29,"column":24,"nodeType":"80","messageId":"81","endLine":29,"endColumn":39},{"ruleId":"102","severity":1,"message":"103","line":166,"column":12,"nodeType":"104","endLine":166,"endColumn":14,"suggestions":"105"},{"ruleId":"78","severity":1,"message":"106","line":174,"column":10,"nodeType":"80","messageId":"81","endLine":174,"endColumn":13},{"ruleId":"82","severity":1,"message":"83","line":289,"column":70,"nodeType":"84","endLine":289,"endColumn":116},{"ruleId":"82","severity":1,"message":"83","line":289,"column":158,"nodeType":"84","endLine":289,"endColumn":257},{"ruleId":"85","severity":1,"message":"86","line":327,"column":76,"nodeType":"87","messageId":"88","endLine":327,"endColumn":89},{"ruleId":"82","severity":1,"message":"83","line":335,"column":10,"nodeType":"84","endLine":335,"endColumn":144},{"ruleId":"78","severity":1,"message":"107","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":18},{"ruleId":"78","severity":1,"message":"108","line":5,"column":8,"nodeType":"80","messageId":"81","endLine":5,"endColumn":16},{"ruleId":"78","severity":1,"message":"109","line":22,"column":9,"nodeType":"80","messageId":"81","endLine":22,"endColumn":17},{"ruleId":"78","severity":1,"message":"110","line":22,"column":30,"nodeType":"80","messageId":"81","endLine":22,"endColumn":36},{"ruleId":"82","severity":1,"message":"83","line":100,"column":27,"nodeType":"84","endLine":100,"endColumn":76},{"ruleId":"78","severity":1,"message":"111","line":72,"column":12,"nodeType":"80","messageId":"81","endLine":72,"endColumn":20},{"ruleId":"82","severity":1,"message":"83","line":96,"column":25,"nodeType":"84","endLine":96,"endColumn":74},{"ruleId":"82","severity":1,"message":"83","line":101,"column":30,"nodeType":"84","endLine":101,"endColumn":79},{"ruleId":"82","severity":1,"message":"83","line":107,"column":27,"nodeType":"84","endLine":107,"endColumn":73},{"ruleId":"82","severity":1,"message":"83","line":114,"column":25,"nodeType":"84","endLine":114,"endColumn":70},{"ruleId":"82","severity":1,"message":"83","line":120,"column":27,"nodeType":"84","endLine":120,"endColumn":72},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'setOptionname' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Link' is defined but never used.","'SetUsername' is assigned a value but never used.","'SetUserid' is assigned a value but never used.","'optionname' is assigned a value but never used.","'optStatus' is assigned a value but never used.","'setOptStatus' is assigned a value but never used.","'taskValue' is assigned a value but never used.","'fetchlist' is assigned a value but never used.","'setFetchlist' is assigned a value but never used.","'showList' is assigned a value but never used.","'setshowList' is assigned a value but never used.","'usertasklist' is assigned a value but never used.","'setUsertasklist' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.","ArrayExpression",["114"],"'num' is defined but never used.","'Redirect' is defined but never used.","'Tasklist' is defined but never used.","'username' is assigned a value but never used.","'userid' is assigned a value but never used.","'passData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"115","fix":"116"},"Update the dependencies array to be: [userid]",{"range":"117","text":"118"},[3294,3296],"[userid]"]