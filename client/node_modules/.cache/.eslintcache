[{"/home/sonia/projects/AdvancedToDo/client/src/index.js":"1","/home/sonia/projects/AdvancedToDo/client/src/App.js":"2","/home/sonia/projects/AdvancedToDo/client/src/reportWebVitals.js":"3","/home/sonia/projects/AdvancedToDo/client/src/components/TaskList.js":"4","/home/sonia/projects/AdvancedToDo/client/src/components/ChildList.js":"5","/home/sonia/projects/AdvancedToDo/client/src/context/ListContext.js":"6"},{"size":500,"mtime":1625477877982,"results":"7","hashOfConfig":"8"},{"size":1148,"mtime":1626980497473,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1625477877982,"results":"10","hashOfConfig":"8"},{"size":6683,"mtime":1626986147277,"results":"11","hashOfConfig":"8"},{"size":7080,"mtime":1626982304514,"results":"12","hashOfConfig":"8"},{"size":451,"mtime":1625739631217,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ccwy88",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/sonia/projects/AdvancedToDo/client/src/index.js",[],["29","30"],"/home/sonia/projects/AdvancedToDo/client/src/App.js",[],"/home/sonia/projects/AdvancedToDo/client/src/reportWebVitals.js",[],"/home/sonia/projects/AdvancedToDo/client/src/components/TaskList.js",["31","32","33","34","35","36","37","38"],"import react from 'react';\nimport React, { useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport{useContext} from 'react';\nimport Axios from 'axios';\nimport {ListContext} from '../context/ListContext.js'\nimport  { useRef, useEffect } from 'react';\n\n\nconst Tasklist=()=>{\n\n    const{optionname,setOptionname}=useContext(ListContext)\n    const [task,setTasks] = useState(\"\");\n    const [items,setItems]=useState([]);\n    const[toggleBtn,setToggleBtn]=useState(true);\n    const[isEditItem,setIsEditItem]=useState(null);\n    const[optStatus,setOptStatus]=useState(false);\n    const[taskValue,setTaskvalue]=useState(\"\")\n    const[validatevalue,setValidatevalue]=useState(\"\")\n    let history=useHistory();\n\n   \n  function passData(val)\n    \n      {\n        if(val.length>0)\n        {\n     var name= val[0].toUpperCase()+val.slice(1)\n      \n        }\n  \n      setTasks(name);\n  \n      return val.length<15 ?'':setValidatevalue(\"max char 15\");\n         \n      }\n\n\n\n  const submitTask=()=>{\n        \n      if(task){\n                \n        Axios.post(\"http://localhost:4000/\",{\n        \n        task:task,\n             \n        }).then(()=>{\n          alert(\"successful insert\")});\n          addItem();\n        \n                    }\n       else{\n       setTaskvalue(\"please fill the field\");\n       inputRef.current.focus();\n            }\n                       };  \n  \n\n\n    const inputRef = useRef();\n      useEffect(() => {\n       inputRef.current.focus();\n\n                       })\n\n\n\n\n    const deleteItem=(id,task_del)=>{\n    const updatedItems=items.filter((elm,ind)=>{\n        \n           return ind!==id;\n       \n                      } ) ;\n             deleteTask(task_del);\n             setItems(updatedItems);\n\n          } \n\n          const updateTask=(tasname,txt)=>{\n          \n           \n        \n        Axios.put(\"http://localhost:4000/edit\",\n             {\n              tasname:tasname,original_txt:txt\n            \n              }).then((response)=>\n          \n             { \n               //alert(\"update\");\n        \n              }\n            \n              );\n          \n          \n              }\n\n\n\n        const updateTaskStatus=(txt,status)=>{\n          \n                   \n        Axios.put(\"http://localhost:4000/Update\",\n           { status:status,txtupdate:txt}).then((response)=>\n          \n           { \n             //alert(\"update\");\n        \n           }\n            \n           );\n          \n          \n          }\n        \n        \n\n\n        const deleteTask=(task_del)=>{\n\n          Axios.delete(`http://localhost:4000/delete/${task_del}`);\n      \n                                     };\n \n\n    const addItem=()=>{\n         if(!task){\n                  }else if(task && !toggleBtn){\n\n                  setItems(\n                  items.map((elem)=>{\n                              if(elem.id===isEditItem){\n                              setToggleBtn(true)\n          \n                              setTasks(\" \")\n                               updateTask(task,elem.text)\n                               return{...elem,text:task}\n            \n                                     }\n                  return elem;\n                  })\n      \n                           )\n                     } else{\n                         setItems([{id:Date.now(),text:task,status:false},...items]);\n\n                          setTasks(\"\");\n                          setValidatevalue(\"\");\n   \n                            }\n                      }\n\n\n\n\n      const editItem=(id)=>{\n  \n        let newEditItem=items.find((elem)=>{\n        \n        return elem.id===id\n\n                          });\n         setToggleBtn(false);\n          setTasks(newEditItem.text)\n          setIsEditItem(id)\n\n\n          }\n\n\n        const redirectTask=()=>{\n\n  \n\n        history.push(\"/childlist\");\n\n                 \n\n          }\n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          <label class=\"heading\"> ToDo App</label> <br></br> \n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\"  ref={inputRef} class=\"todonametxt\" title={validatevalue} value={task}autoComplete=\"off\" maxLength=\"20\" onChange={(e)=>passData(e.target.value)}></input>&nbsp;&nbsp;\n                          </span>\n                          \n                          <span class=\"imgbutton\">\n                            {\n\n                              toggleBtn?<button onClick={submitTask}><img class=\"plusimage\"  src=\"/image/plus.png\"></img></button>:<button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n                            }\n                            </span>\n                           \n                      \n                          { \n    \n    items.map((elm,ind)=>{\n  \n        return(\n          \n         \n                <div class=\"insert\" key={ind}>\n\n                <input type=\"radio\"  name=\"taskname\"    onChange={(e)=>{\n                \n                 setItems(items.filter(obj2=>{\n                  \n\n                  if(obj2.id===elm.id){\n          \n                   obj2.status=e.target.checked\n\n                  setOptionname(elm.text);\n  \n              \n            \n               \n               updateTaskStatus(obj2.text,obj2.status)\n          \n                         \n                  }\n                  return obj2\n               \n                 \n                 })\n                 )}\n               \n                 } value={elm.text} checked={elm.status} class=\"optionbtn\" name=\"option\" onClick= {redirectTask} \n                \n                 />\n                 \n                            \n                \n \n         <label name=\"text\">{elm.text}</label>\n         <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={()=>editItem(elm.id)}/>\n         <i class=\"fa fa-trash\" title=\"delete Item\" onClick={()=>deleteItem(ind,elm.text)}></i>\n\n          \n              </div>\n            \n            \n             ) \n            \n            }\n            \n            \n            \n\n                \n            )\n                       \n}\n\n\n\n\n                      \n                          </div>\n          \n                   </div>\n                      \n          \n           </div>\n          \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default Tasklist;","/home/sonia/projects/AdvancedToDo/client/src/components/ChildList.js",["39","40","41","42","43"],"import react from 'react';\nimport React, { useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport{useContext} from 'react';\nimport {ListContext} from '../context/ListContext.js'\nimport Axios from 'axios';\nimport  { useRef, useEffect } from 'react';\n\n\nconst ChildList=()=>{\n\n    const [task,setTasks] = useState(\"\");\n    const [items,setItems]=useState([]);\n    \n    const[toggleBtn,setToggleBtn]=useState(true);\n    const[isEditItem,setIsEditItem]=useState(null);\n    \n    const{optionname,setOptionname}=useContext(ListContext)\n    const[validatevalue,setValidatevalue]=useState(\"\")\n    const[tskList,settskList]=useState([])\n    const[showallCheck,setShowallCheck]=useState(\"\")\n    \n  \n    let history=useHistory();\n\n    \n   \n\n  function passData(val)\n  {\n  \n  if(val.length>0)\n  {\n    var name= val[0].toUpperCase()+val.slice(1)\n\n   }\n\nsetTasks(name);\n\n\nreturn val.length<15 ?'':setValidatevalue(\"max char 15\");\n\n}\n\n\n  const deleteItem=(id,task_del)=>{\n    const updatedItems=items.filter((elm,ind)=>{\n        \n        return ind!==id;\n       \n                     } ) ;\n             deleteTask(task_del);\n             setItems(updatedItems);\n\n          } \n\n\n        const deleteTask=(task_del)=>{\n\n          Axios.delete(`http://localhost:4000/childdelete/${task_del}`);\n      \n          };\n\n\n         \n          const updateTask=(tasname,txt)=>{\n            \n                       \n          Axios.put(\"http://localhost:4000/childedit\",\n             {\n                tasname:tasname,original_txt:txt\n              \n              }).then((response)=>\n            \n             { alert(\"update\");\n          \n            }\n              \n             );\n            \n            \n           }\n\n\n\n\n\n\n  const addItem=()=>{\n    if(!task){\n    }else if(task && !toggleBtn){\n\n      setItems(\n        items.map((elem)=>{\n          if(elem.id===isEditItem){\n             setToggleBtn(true)\n          \n              setTasks(\" \")\n            \n            \n              updateTask(task,elem.text)\n              return{...elem,text:task}\n            \n                           }\n             return elem;\n            })\n      \n      )\n    } else{\n    setItems([{id:Date.now(),text:task,status:false},...items]);\n\n    setTasks(\"\")\n   \n   } }\n\n\n\n const inputRef = useRef();\n useEffect(() => {\n  inputRef.current.focus();\n\n                  })\n\n\n\n\n const submitTask=()=>{\n        \n        \n  if(task){\n      Axios.post(\"http://localhost:4000/childinsert\",{\n      task:task,\n      text:optionname\n           \n   }).then(()=>{\n       alert(\"successful insert\")});\n       addItem();\n      \n             }\n       \n      \n                        };  \n\n\n \nconst editItem=(id)=>{\n  \n    let newEditItem=items.find((elem)=>{\n    \n    \n    return elem.id===id\n\n             });\n  setToggleBtn(false);\nsetTasks(newEditItem.text)\nsetIsEditItem(id)\n\n\n}\n\n\n\n    const getTask=(e)=>{\n     \n\n       Axios.get(\"http://localhost:4000/showselected\").then((response)=>\n       settskList(response.data)\n      \n         )    \n    \n\n        setShowallCheck(e.target.checked)\n                       }\n\n\n\nconst updateTaskStatus=(txt,status)=>{\n     \nAxios.put(\"http://localhost:4000/Childupdate\",\n   { status:status,txtupdate:txt}).then((response)=>\n  \n   { alert(\"update\");\n\n   }\n    \n   );\n   \n  }\n\n\n\n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          <button id = \"x\" class=\"closebtn\"  onClick={()=>{history.push( \"/\")}}> X</button>\n                   \n                          <label class=\"heading\"> {optionname}</label> <br></br> \n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\" class=\"todonametxt\" ref={inputRef}  title={validatevalue}   value={task}autoComplete=\"off\" maxLength=\"20\" onChange={(e)=>passData(e.target.value)}></input>&nbsp;&nbsp;\n                          </span>\n                          <span class=\"imgbutton\">\n                            {\n\n                              toggleBtn?<button onClick={submitTask}><img class=\"plusimage\" title=\"\" src=\"/image/plus.png\"></img></button>:<button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n                            }\n                            </span>\n                      \n                          { \n    \n    items.map((elm,ind)=>{\n  \n        return(\n          \n         \n                <div class=\"hhh\" key={ind}>\n\n                <input type=\"checkbox\"  name=\"taskname\"    onChange={(e)=>{\n                \n                 setItems(items.filter(obj2=>{\n                  \n\n                  if(obj2.id===elm.id){\n          \n                   obj2.status=e.target.checked\n\n  \n            \n               \n               updateTaskStatus(obj2.text,obj2.status)\n          \n                         \n                  }\n                  return obj2\n               \n                 \n                 })\n                 )}\n               \n                 } value={elm.text} checked={elm.status} class=\"optionbtn\" name=\"option\"\n                \n                 />\n                 \n                            \n                \n \n         <label style={{textDecoration:elm.status?\"line-through\":\"none\"} }  name=\"text\">{elm.text}</label>\n         <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={()=>editItem(elm.id)}/>\n         <i class=\"fa fa-trash\" title=\"delete Item\" onClick={()=>deleteItem(ind,elm.text)}></i>\n\n          \n              </div>\n            \n            \n             ) \n            \n            }\n            \n            \n            \n\n                \n            )\n                       \n}\n\n\n\n\n\n                          </div>\n                          <div class=\"third_div\">\n\n                          <input type=\"checkbox\" class=\"\" value=\"0\" name=\"\" checked={showallCheck}  onChange={getTask}\n\n/>\n\n\n\n\n<span class=\"showcomplete_txt\" >\n     \n <label >completed Task</label></span>\n {\n     \n     tskList.map((val,key)=>{\n         \n     if(showallCheck===true){\n        \n         return (\n             <div class=\"showcheck\">        \n             <h4>Task Name:</h4>&nbsp;&nbsp;<h5>{val.childtask_name}</h5>\n             <h4>&nbsp;&nbsp;Created Date:</h4>&nbsp;&nbsp;<h5>{val.child_date}</h5>\n             </div>\n             \n                 )\n             }\n                 else {\n \n                     return null\n                 }\n                                  }\n                      )\n }  \n\n\n\n\n </div>\n                  <span class=\"newbtn\"><input type=\"button\"  class=\"newbtn\" value= \" +   Cancel\"  onClick={()=>history.push(\"/\")} /></span> \n\n                         \n      \n      \n </div>\n </div>\n     \n            \n        \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default ChildList;","/home/sonia/projects/AdvancedToDo/client/src/context/ListContext.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":12,"column":11,"nodeType":"50","messageId":"51","endLine":12,"endColumn":21},{"ruleId":"48","severity":1,"message":"52","line":17,"column":11,"nodeType":"50","messageId":"51","endLine":17,"endColumn":20},{"ruleId":"48","severity":1,"message":"53","line":17,"column":21,"nodeType":"50","messageId":"51","endLine":17,"endColumn":33},{"ruleId":"48","severity":1,"message":"54","line":18,"column":11,"nodeType":"50","messageId":"51","endLine":18,"endColumn":20},{"ruleId":"55","severity":1,"message":"56","line":203,"column":70,"nodeType":"57","endLine":203,"endColumn":116},{"ruleId":"55","severity":1,"message":"56","line":203,"column":158,"nodeType":"57","endLine":203,"endColumn":257},{"ruleId":"58","severity":1,"message":"59","line":241,"column":76,"nodeType":"60","messageId":"61","endLine":241,"endColumn":89},{"ruleId":"55","severity":1,"message":"56","line":249,"column":10,"nodeType":"57","endLine":249,"endColumn":144},{"ruleId":"48","severity":1,"message":"62","line":18,"column":22,"nodeType":"50","messageId":"51","endLine":18,"endColumn":35},{"ruleId":"55","severity":1,"message":"56","line":213,"column":70,"nodeType":"57","endLine":213,"endColumn":124},{"ruleId":"55","severity":1,"message":"56","line":213,"column":166,"nodeType":"57","endLine":213,"endColumn":265},{"ruleId":"58","severity":1,"message":"59","line":248,"column":76,"nodeType":"60","messageId":"61","endLine":248,"endColumn":89},{"ruleId":"55","severity":1,"message":"56","line":256,"column":10,"nodeType":"57","endLine":256,"endColumn":144},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'optionname' is assigned a value but never used.","Identifier","unusedVar","'optStatus' is assigned a value but never used.","'setOptStatus' is assigned a value but never used.","'taskValue' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'setOptionname' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]