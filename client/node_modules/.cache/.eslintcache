[{"/home/sonia/projects/AdvancedTodo/client/src/index.js":"1","/home/sonia/projects/AdvancedTodo/client/src/App.js":"2","/home/sonia/projects/AdvancedTodo/client/src/reportWebVitals.js":"3","/home/sonia/projects/AdvancedTodo/client/src/context/ListContext.js":"4","/home/sonia/projects/AdvancedTodo/client/src/components/ChildList.js":"5","/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js":"6","/home/sonia/projects/AdvancedTodo/client/src/components/Login.js":"7","/home/sonia/projects/AdvancedTodo/client/src/components/SignUp.js":"8"},{"size":500,"mtime":1625477877982,"results":"9","hashOfConfig":"10"},{"size":1337,"mtime":1629108728138,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1625477877982,"results":"12","hashOfConfig":"10"},{"size":657,"mtime":1629063767658,"results":"13","hashOfConfig":"10"},{"size":7441,"mtime":1629123232751,"results":"14","hashOfConfig":"10"},{"size":5956,"mtime":1629131357026,"results":"15","hashOfConfig":"10"},{"size":3194,"mtime":1629123095447,"results":"16","hashOfConfig":"10"},{"size":4467,"mtime":1628873522632,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ejqnau",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"/home/sonia/projects/AdvancedTodo/client/src/index.js",[],["38","39"],"/home/sonia/projects/AdvancedTodo/client/src/App.js",[],"/home/sonia/projects/AdvancedTodo/client/src/reportWebVitals.js",[],"/home/sonia/projects/AdvancedTodo/client/src/context/ListContext.js",[],"/home/sonia/projects/AdvancedTodo/client/src/components/ChildList.js",["40","41","42","43","44","45","46","47","48","49","50","51","52","53"],"import react from 'react';\nimport React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useContext } from 'react';\nimport { ListContext } from '../context/ListContext.js'\nimport Axios from 'axios';\nimport { useRef, useEffect } from 'react';\n\n\nconst ChildList = () => {\n\n  const [task, setTasks] = useState(\"\");\n  const [items, setItems] = useState([]);\n\n  const [toggleBtn, setToggleBtn] = useState(true);\n  const [isEditItem, setIsEditItem] = useState(null);\n\n  const { optionname, setOptionname } = useContext(ListContext)\n  const [validatevalue, setValidatevalue] = useState(\"\")\n  const [tskList, settskList] = useState([])\n  const [showallCheck, setShowallCheck] = useState(\"\")\n  const { username, SetUsername, userid, SetUserid, childtaskid,Setchildtaskid} = useContext(ListContext);\n  const [fetchid, setFetchid] = useState([])\n\n  let history = useHistory();\n\n\n\n\n  function passData(val) {\n\n    if (val.length > 0) {\n      var name = val[0].toUpperCase() + val.slice(1)\n\n    }\n\n    setTasks(name);\n\n\n    return val.length < 15 ? '' : setValidatevalue(\"max char 15\");\n\n  }\n\n\n\n  const deleteItem = (id, task_del) => {\n    const updatedItems = items.filter((elm, ind) => {\n\n      return ind !== id;\n\n    });\n    deleteTask(task_del);\n    setItems(updatedItems);\n\n  }\n\n\n\n  const deleteTask = (child_id) => {\n    // alert(\"del=\"+task_del)\n    let taskid = child_id\n    let todolistId = childtaskid\n    \n\n    Axios.delete(`http://localhost:4000/users/${userid}/todolists/${todolistId}/tasks/${taskid}`);\n\n  };\n\n\n\n\n  const updateTask = (tasname, childtodo_id) => {\n    let taskid = childtodo_id, todolistId = childtaskid\n\n  \n    \n    \n    Axios.put(`http://localhost:4000/users/${userid}/todolist/${todolistId}/tasks/${taskid}`,\n      {\n        tasname: tasname\n\n      }).then((response) => {\n        alert(\"update\");\n\n      }\n\n      );\n\n\n  }\n\n\n\n\n\n\n  const addItem = () => {\n    if (!task) {\n    } else if (task && !toggleBtn) {\n\n      setItems(\n        items.map((elem) => {\n\n          //alert(\"elem=\"+elem.childtodo_id)\n          // alert(\"isedit=\"+isEditItem)\n          if (elem.childtodo_id === isEditItem) {\n            setToggleBtn(true)\n\n            setTasks(\" \")\n\n\n            updateTask(task, elem.childtodo_id)\n            return { ...elem, childtask_name: task }\n\n          }\n          return elem;\n        })\n\n      )\n    } else {\n\n\n\n      setItems([{ childtask_name: task, child_status: false }, ...items]);\n\n      setTasks(\"\")\n\n    }\n  }\n\n\n\n  const inputRef = useRef();\n  useEffect(() => {\n    inputRef.current.focus();\n\n  })\n\n\n\n\n  const submitTask = () => {\n\n    let todolistid = childtaskid\n\n    if (task) {\n      Axios.post(`http://localhost:4000/users/${userid}/todolists/${todolistid}/tasks`, {\n        task: task,\n        text: optionname,\n        Todoid: fetchid,\n\n\n      }).then(() => {\n        alert(\"successful insert\")\n\n      });\n      addItem();\n\n    }\n\n\n  };\n\n\n\n  const editItem = (id) => {\n    let newEditItem = items.find((elem) => {\n     \n\n      return elem.childtodo_id === id\n\n    });\n    setToggleBtn(false);\n    setTasks(newEditItem.childtask_name)\n    setIsEditItem(id)\n\n\n  }\n\n\n\n\n  useEffect(() => {\n    let todolistId = childtaskid\n    \n    Axios.get(`http://localhost:4000/users/${userid}/todolists/${todolistId}/tasks `,\n\n      {\n       // optionname\n      }).then(response => {\n\n\n       var todoid = response.data[0].childtodo_id\n      \n        setItems(response.data)\n       \n\n      })\n      .catch(err => {\n        console.log(err)\n\n      })\n    \n\n  }, []);\n\n\n\n\n\n\n  const getTask = (e) => {\n\n    let todolistId = childtaskid\n\n    Axios.get(`http://localhost:4000/users/${userid}/todolist/${todolistId}/tasks`, {\n\n\n    }).then((response) =>\n      settskList(response.data)\n\n    )\n\n    setShowallCheck(e.target.checked)\n  }\n\n\n\n\n\n  const updateTaskStatus = (txt, status, child_id) => {\n    \n    let taskid = child_id\n    let todolistId = childtaskid\n    \n    Axios.put(`http://localhost:4000/users/${userid}/todolists/${todolistId}/tasks/${taskid}`,\n      { status: status, txtupdate: txt }).then((response) => {\n        alert(\"update\");\n\n      }\n\n      );\n\n  }\n\n\n\n\n\n  return (\n\n    <react.Fragment>\n\n      <div class=\"parent_div\">\n        <div class=\"container\">\n\n\n          <div class=\"secondcontainer\">\n\n\n            <label class=\"heading\"> {optionname}</label> <br></br>\n\n            <span class=\"thirdcontainer\">\n              <input type=\"text\" class=\"todonametxt\" ref={inputRef} title={validatevalue} value={task} autoComplete=\"off\" maxLength=\"20\" onChange={(e) => passData(e.target.value)}></input>&nbsp;&nbsp;\n            </span>\n            <span class=\"imgbutton\">\n              {\n\n                toggleBtn ? <button onClick={submitTask}><img class=\"plusimage\" title=\"\" src=\"/image/plus.png\"></img></button> : <button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n              }\n            </span>\n\n            {\n\n              items.map((elm, ind) => {\n\n\n\n                return (\n\n\n                  <div class=\"hhh\" key={ind}>\n\n\n                    <input type=\"checkbox\" name=\"taskname\" onChange={(e) => {\n                      // alert(\"elmout\"+elm.id)\n\n                      setItems(items.filter(obj2 => {\n\n\n\n                        if (obj2.childtodo_id === elm.childtodo_id) {\n\n                          obj2.child_status = e.target.checked\n\n\n\n\n                          updateTaskStatus(obj2.childtask_name, obj2.child_status, obj2.childtodo_id)\n\n\n                        }\n                        return obj2\n\n\n                      })\n                      )\n                    }\n\n\n\n\n                    } value={elm.childtask_name} checked={elm.child_status == 0 ? false : true} class=\"optionbtn\" name=\"option\"\n\n                    />\n\n\n\n\n                    <label style={{ textDecoration: elm.child_status == 1 ? \"line-through\" : \"none\" }} name=\"text\">{elm.childtask_name}</label>\n                    <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={() => editItem(elm.childtodo_id)} />\n                    <i class=\"fa fa-trash\" title=\"delete Item\" onClick={() => deleteItem(ind, elm.childtodo_id)}></i>\n\n\n                  </div>\n\n\n                )\n\n              }\n\n\n\n\n\n              )\n\n            }\n\n\n\n\n\n          </div>\n          <div class=\"third_div\">\n\n            <input type=\"checkbox\" class=\"\" value=\"0\" name=\"\" checked={showallCheck} onChange={getTask}\n\n            />\n\n\n\n\n            <span class=\"showcomplete_txt\" >\n\n              <label >completed Task</label></span>\n            {\n\n              tskList.map((val, key) => {\n\n                if (showallCheck === true) {\n\n                  return (\n                    <div class=\"showcheck\">\n                      <h4>Task Name:</h4>&nbsp;&nbsp;<h5>{val.childtask_name}</h5>\n                      <h4>&nbsp;&nbsp;Created Date:</h4>&nbsp;&nbsp;<h5>{val.child_date}</h5>\n                    </div>\n\n                  )\n                }\n                else {\n\n                  return null\n                }\n              }\n              )\n            }\n\n\n\n\n\n          </div>\n\n\n\n\n          <span class=\"newbtn\"><input type=\"button\" class=\"newbtn\" value=\" +   back\" onClick={() => history.push(\"/users/:userid/todolists\")} /></span>\n\n\n        </div>\n      </div>\n\n\n\n\n    </react.Fragment>\n\n\n\n  )\n\n}\nexport default ChildList;","/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js",["54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74"],"/home/sonia/projects/AdvancedTodo/client/src/components/Login.js",["75","76","77","78","79","80","81","82"],"import react, { useRef, useState, useEffect } from 'react';\n\nimport Axios from 'axios';\nimport { Redirect } from 'react-router-dom';\n\nimport Tasklist from './TaskList';\nimport { useHistory } from \"react-router-dom\";\nimport { ListContext } from '../context/ListContext.js'\nimport { useContext } from 'react';\n\n\n\n\n\nconst Login = () => {\n\n  const { username, SetUsername, userid, SetUserid } = useContext(ListContext);\n  const [loginstatus, SetLoginstatus] = useState(\"\")\n  const [textstatus, Settextstatus] = useState(\"\")\n\n  let history = useHistory();\n\n  const [user, setUser] = useState({\n\n    email: \"\", password: \"\"\n\n  });\n\n\n  let name, value, bool;\n  const handleInputs = (e) => {\n\n    name = e.target.name;\n    \n    value = e.target.value;\n    if (name === \"email\") {\n      const emailRegex = /\\S+@\\S+\\.\\S+/;\n      if (emailRegex.test(value)) {\n        Settextstatus(\"\")\n\n\n      } else {\n        Settextstatus(\"not valid email\");\n\n      }\n\n    }\n\n    setUser({ ...user, [name]: value });\n\n  }\n\n  const loginData = () => {\n    const { email, password } = user;\n\n    if (user) {\n\n      \n      Axios.post(`http://localhost:4000/users/todolists`, {\n\n        email, password\n\n      }).then((response) => {\n\n        if (response.data.message) {\n          Settextstatus(\"\")\n          SetLoginstatus(response.data.message)\n          \n        }\n\n\n        else\n\n          if (response.data[0].email) {\n            var user = response.data[0].f_name\n            \n            var userid = response.data[0].user_id\n          \n\n            SetUsername(user);\n            SetUserid(userid)\n\n            history.push('/users/:user/todolists')\n          }\n\n      });\n\n    }\n    \n\n  };\n\n\n\n\n\n\n\n\n  const cancelData = () => {\n    setUser({ email: \" \", password: \" \" })\n    SetLoginstatus(\" \")\n    Settextstatus(\" \")\n\n  }\n\n\n  return (\n\n    <react.Fragment>\n\n      <div class=\"parent_div\">\n        <div class=\"container\">\n\n\n          <div class=\"secondcontainer\">\n            <img class=\"todoimg\" src=\"/image/todoicon.jpeg\"></img>\n            &nbsp;&nbsp;&nbsp;<label class=\"heading\">ToDo App</label> <br></br> <br></br>\n            <label class=\"todolbl\" >Login</label><br></br>\n            <label class=\"todolbl2\" >Login with E-mail</label><br></br>\n            <span class=\"thirdcontainer\">\n              <input type=\"text\" name=\"email\" class=\"todonametxt\" value={user.email} autoComplete=\"off\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n            </span><br></br>\n            <p>{textstatus}</p>\n            <label class=\"todolbl\" >Password</label><br></br>\n\n            <span class=\"thirdcontainer\">\n              <input type=\"password\" name=\"password\" class=\"todopasstxt\" value={user.password} autoComplete=\"off\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n            </span>\n            <p>{loginstatus}</p>\n            <div class=\"btnclass\">\n              <button class=\"todobtn\" onClick={loginData}>SignIn</button>&nbsp;&nbsp;<button class=\"todobtn\" onClick={cancelData}>Reset</button>\n              <a href=\"/users\" class=\"signup\">SignUp</a></div>\n\n\n\n\n          </div>\n\n\n        </div>\n\n\n\n      </div>\n\n\n\n    </react.Fragment>\n\n\n\n  )\n\n}\nexport default Login;\n\n\n\n\n\n\n","/home/sonia/projects/AdvancedTodo/client/src/components/SignUp.js",["83","84","85","86","87","88","89"],"import react from 'react';\nimport React, { useState} from \"react\";\nimport Axios from 'axios';\n\n\n\n\n\nconst SignUp=()=>{\n\nconst [txtvalidate,Settxtvalidate]=useState(\"\")\n\n  const [user,setUser] = useState({\n\nfname:\"\",lname:\"\",email:\"\",password:\"\",cpassword:\"\"\n\n  });\n  \n  let name,value;\n  const handleInputs=(e)=>{\n\n    name=e.target.name;\n    value=e.target.value;\n    \n      ///////////////////////\n\n\n     \n\n\n      ///////////////////////\n\n    setUser({...user,[name]:value});\n\n  }\n\n\n\n  \n  const registerData=()=>{\n    const {fname,lname,email,password,cpassword}=user;\n      \n    if(user){\n    \n              \n      Axios.post(\"http://localhost:4000/users\",{\n      \n      fname,lname,email,password,cpassword\n           \n      }).then(()=>{\n       \n        alert(\"successful insert\")});\n   \n                  } \n             cancelData();   \n                \n       };  \n\n     const cancelData = () => { \n     setUser({fname:\"\",lname:\"\",email:\"\",password:\"\",cpassword:\"\"})\n      }\n\n\n\n\n\n\n\n\n  function passData(val,name)\n    \n  {\n    alert(name)\n  }\n\n\n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          \n                          &nbsp;&nbsp;&nbsp;<label class=\"heading\">SignUp</label> <br></br> <br></br>\n                          \n                         \n                          \n                        <span class=\"thirdcontainer\">\n                        <img  class=\"userpic\" src=\"/image/usericon.jpeg\"></img>&nbsp;\n                          <input type=\"text\"  name=\"fname\" value={user.fname} class=\"todonametxt\" placeholder=\"First Name .......\"  autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n                          </span><br></br>\n                        \n                         \n                          <span class=\"thirdcontainer\">\n                             <img  class=\"userpic\" src=\"/image/usericon.jpeg\"></img>&nbsp;\n                          \n                          <input type=\"text\"  name=\"lname\" value={user.lname} class=\"todonametxt\" placeholder=\"Second Name.....\"      autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input><br></br>\n                          </span>\n                          \n                          <span class=\"thirdcontainer\">\n                          <img  class=\"mailpic\" src=\"/image/mails.jpeg\"></img>&nbsp;\n                          <input type=\"text\" name=\"email\" value={user.email}  class=\"todonametxt\" placeholder=\"E_mail.....\"  autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs}></input>&nbsp;&nbsp;\n                          </span><br></br>\n                          \n                          \n                          \n                        <span class=\"thirdcontainer\">\n                        <img  class=\"mailpic\" src=\"/image/lock.jpeg\"></img>&nbsp;\n                          <input type=\"text\"  name=\"password\" value={user.password} class=\"todonametxt\" placeholder=\"Password.....\"  autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs}></input>\n                          </span><br></br>\n                          <p>{txtvalidate}</p>\n                          \n                          <span class=\"thirdcontainer\">\n                          <img  class=\"mailpic\" src=\"/image/lock.jpeg\"></img>&nbsp;\n                            <input type=\"text\"  name=\"cpassword\" value={user.cpassword} class=\"todonametxt\" placeholder=\"Re_enetr Password.....\"    autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n                            </span>\n                            <p>{txtvalidate}</p>\n                          <div class=\"btnclass\">\n                          <button  class=\"todobtn\" onClick={registerData}>Register</button>&nbsp;&nbsp;<button class=\"todobtn\" onClick={cancelData }>Reset</button>\n                          <a href=\"/\" class=\"signup\">Login</a>\n                          </div>\n                          \n                        \n                    \n                          \n                          </div>\n                         \n          \n                   </div>\n                   \n                      \n          \n           </div>\n           \n          \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default SignUp;",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":18,"column":23,"nodeType":"96","messageId":"97","endLine":18,"endColumn":36},{"ruleId":"94","severity":1,"message":"98","line":22,"column":11,"nodeType":"96","messageId":"97","endLine":22,"endColumn":19},{"ruleId":"94","severity":1,"message":"99","line":22,"column":21,"nodeType":"96","messageId":"97","endLine":22,"endColumn":32},{"ruleId":"94","severity":1,"message":"100","line":22,"column":42,"nodeType":"96","messageId":"97","endLine":22,"endColumn":51},{"ruleId":"94","severity":1,"message":"101","line":22,"column":65,"nodeType":"96","messageId":"97","endLine":22,"endColumn":79},{"ruleId":"94","severity":1,"message":"102","line":23,"column":19,"nodeType":"96","messageId":"97","endLine":23,"endColumn":29},{"ruleId":"94","severity":1,"message":"103","line":193,"column":12,"nodeType":"96","messageId":"97","endLine":193,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":205,"column":6,"nodeType":"106","endLine":205,"endColumn":8,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":269,"column":58,"nodeType":"110","endLine":269,"endColumn":112},{"ruleId":"108","severity":1,"message":"109","line":269,"column":156,"nodeType":"110","endLine":269,"endColumn":255},{"ruleId":"111","severity":1,"message":"112","line":313,"column":76,"nodeType":"113","messageId":"114","endLine":313,"endColumn":78},{"ruleId":"115","severity":1,"message":"116","line":313,"column":115,"nodeType":"117","messageId":"118","endLine":313,"endColumn":128},{"ruleId":"111","severity":1,"message":"112","line":320,"column":70,"nodeType":"113","messageId":"114","endLine":320,"endColumn":72},{"ruleId":"108","severity":1,"message":"109","line":321,"column":21,"nodeType":"110","endLine":321,"endColumn":168},{"ruleId":"94","severity":1,"message":"119","line":3,"column":10,"nodeType":"96","messageId":"97","endLine":3,"endColumn":14},{"ruleId":"94","severity":1,"message":"120","line":8,"column":10,"nodeType":"96","messageId":"97","endLine":8,"endColumn":21},{"ruleId":"94","severity":1,"message":"99","line":17,"column":21,"nodeType":"96","messageId":"97","endLine":17,"endColumn":32},{"ruleId":"94","severity":1,"message":"100","line":17,"column":42,"nodeType":"96","messageId":"97","endLine":17,"endColumn":51},{"ruleId":"94","severity":1,"message":"121","line":17,"column":53,"nodeType":"96","messageId":"97","endLine":17,"endColumn":64},{"ruleId":"94","severity":1,"message":"122","line":18,"column":11,"nodeType":"96","messageId":"97","endLine":18,"endColumn":21},{"ruleId":"94","severity":1,"message":"123","line":23,"column":10,"nodeType":"96","messageId":"97","endLine":23,"endColumn":19},{"ruleId":"94","severity":1,"message":"124","line":23,"column":21,"nodeType":"96","messageId":"97","endLine":23,"endColumn":33},{"ruleId":"94","severity":1,"message":"125","line":24,"column":10,"nodeType":"96","messageId":"97","endLine":24,"endColumn":19},{"ruleId":"94","severity":1,"message":"126","line":26,"column":10,"nodeType":"96","messageId":"97","endLine":26,"endColumn":19},{"ruleId":"94","severity":1,"message":"127","line":26,"column":21,"nodeType":"96","messageId":"97","endLine":26,"endColumn":33},{"ruleId":"94","severity":1,"message":"128","line":27,"column":10,"nodeType":"96","messageId":"97","endLine":27,"endColumn":18},{"ruleId":"94","severity":1,"message":"129","line":27,"column":20,"nodeType":"96","messageId":"97","endLine":27,"endColumn":31},{"ruleId":"94","severity":1,"message":"130","line":31,"column":10,"nodeType":"96","messageId":"97","endLine":31,"endColumn":22},{"ruleId":"94","severity":1,"message":"131","line":31,"column":24,"nodeType":"96","messageId":"97","endLine":31,"endColumn":39},{"ruleId":"94","severity":1,"message":"103","line":137,"column":11,"nodeType":"96","messageId":"97","endLine":137,"endColumn":17},{"ruleId":"104","severity":1,"message":"132","line":148,"column":6,"nodeType":"106","endLine":148,"endColumn":8,"suggestions":"133"},{"ruleId":"108","severity":1,"message":"109","line":249,"column":58,"nodeType":"110","endLine":249,"endColumn":103},{"ruleId":"108","severity":1,"message":"109","line":249,"column":147,"nodeType":"110","endLine":249,"endColumn":246},{"ruleId":"115","severity":1,"message":"116","line":289,"column":83,"nodeType":"117","messageId":"118","endLine":289,"endColumn":96},{"ruleId":"108","severity":1,"message":"109","line":297,"column":21,"nodeType":"110","endLine":297,"endColumn":162},{"ruleId":"94","severity":1,"message":"134","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":23},{"ruleId":"94","severity":1,"message":"135","line":1,"column":35,"nodeType":"96","messageId":"97","endLine":1,"endColumn":44},{"ruleId":"94","severity":1,"message":"136","line":4,"column":10,"nodeType":"96","messageId":"97","endLine":4,"endColumn":18},{"ruleId":"94","severity":1,"message":"137","line":6,"column":8,"nodeType":"96","messageId":"97","endLine":6,"endColumn":16},{"ruleId":"94","severity":1,"message":"98","line":17,"column":11,"nodeType":"96","messageId":"97","endLine":17,"endColumn":19},{"ruleId":"94","severity":1,"message":"138","line":17,"column":34,"nodeType":"96","messageId":"97","endLine":17,"endColumn":40},{"ruleId":"94","severity":1,"message":"139","line":30,"column":20,"nodeType":"96","messageId":"97","endLine":30,"endColumn":24},{"ruleId":"108","severity":1,"message":"109","line":117,"column":13,"nodeType":"110","endLine":117,"endColumn":61},{"ruleId":"94","severity":1,"message":"140","line":11,"column":20,"nodeType":"96","messageId":"97","endLine":11,"endColumn":34},{"ruleId":"94","severity":1,"message":"141","line":70,"column":12,"nodeType":"96","messageId":"97","endLine":70,"endColumn":20},{"ruleId":"108","severity":1,"message":"109","line":94,"column":25,"nodeType":"110","endLine":94,"endColumn":74},{"ruleId":"108","severity":1,"message":"109","line":100,"column":30,"nodeType":"110","endLine":100,"endColumn":79},{"ruleId":"108","severity":1,"message":"109","line":106,"column":27,"nodeType":"110","endLine":106,"endColumn":73},{"ruleId":"108","severity":1,"message":"109","line":113,"column":25,"nodeType":"110","endLine":113,"endColumn":70},{"ruleId":"108","severity":1,"message":"109","line":119,"column":27,"nodeType":"110","endLine":119,"endColumn":72},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'setOptionname' is assigned a value but never used.","Identifier","unusedVar","'username' is assigned a value but never used.","'SetUsername' is assigned a value but never used.","'SetUserid' is assigned a value but never used.","'Setchildtaskid' is assigned a value but never used.","'setFetchid' is assigned a value but never used.","'todoid' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'childtaskid' and 'userid'. Either include them or remove the dependency array.","ArrayExpression",["144"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Link' is defined but never used.","'subnetMatch' is defined but never used.","'childtaskid' is assigned a value but never used.","'optionname' is assigned a value but never used.","'optStatus' is assigned a value but never used.","'setOptStatus' is assigned a value but never used.","'taskValue' is assigned a value but never used.","'fetchlist' is assigned a value but never used.","'setFetchlist' is assigned a value but never used.","'showList' is assigned a value but never used.","'setshowList' is assigned a value but never used.","'usertasklist' is assigned a value but never used.","'setUsertasklist' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["145"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'Redirect' is defined but never used.","'Tasklist' is defined but never used.","'userid' is assigned a value but never used.","'bool' is defined but never used.","'Settxtvalidate' is assigned a value but never used.","'passData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},"Update the dependencies array to be: [childtaskid, userid]",{"range":"150","text":"151"},"Update the dependencies array to be: [userid]",{"range":"152","text":"153"},[3529,3531],"[childtaskid, userid]",[2463,2465],"[userid]"]