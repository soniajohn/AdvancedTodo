[{"/home/sonia/projects/AdvancedTodo/client/src/index.js":"1","/home/sonia/projects/AdvancedTodo/client/src/App.js":"2","/home/sonia/projects/AdvancedTodo/client/src/reportWebVitals.js":"3","/home/sonia/projects/AdvancedTodo/client/src/context/ListContext.js":"4","/home/sonia/projects/AdvancedTodo/client/src/components/ChildList.js":"5","/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js":"6","/home/sonia/projects/AdvancedTodo/client/src/components/Login.js":"7","/home/sonia/projects/AdvancedTodo/client/src/components/SignUp.js":"8"},{"size":500,"mtime":1625477877982,"results":"9","hashOfConfig":"10"},{"size":1909,"mtime":1628871973528,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1625477877982,"results":"12","hashOfConfig":"10"},{"size":574,"mtime":1628372526473,"results":"13","hashOfConfig":"10"},{"size":9194,"mtime":1628854385588,"results":"14","hashOfConfig":"10"},{"size":8893,"mtime":1628879802680,"results":"15","hashOfConfig":"10"},{"size":4318,"mtime":1628872221417,"results":"16","hashOfConfig":"10"},{"size":4467,"mtime":1628873522632,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"ejqnau",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"/home/sonia/projects/AdvancedTodo/client/src/index.js",[],["39","40"],"/home/sonia/projects/AdvancedTodo/client/src/App.js",[],"/home/sonia/projects/AdvancedTodo/client/src/reportWebVitals.js",[],"/home/sonia/projects/AdvancedTodo/client/src/context/ListContext.js",[],"/home/sonia/projects/AdvancedTodo/client/src/components/ChildList.js",["41","42","43","44","45","46","47","48","49","50","51"],"import react from 'react';\nimport React, { useState} from \"react\";\nimport {useHistory} from \"react-router-dom\";\nimport{useContext} from 'react';\nimport {ListContext} from '../context/ListContext.js'\nimport Axios from 'axios';\nimport  { useRef, useEffect } from 'react';\n\n\nconst ChildList=()=>{\n\n    const [task,setTasks] = useState(\"\");\n    const [items,setItems]=useState([]);\n    \n    const[toggleBtn,setToggleBtn]=useState(true);\n    const[isEditItem,setIsEditItem]=useState(null);\n    \n    const{optionname,setOptionname}=useContext(ListContext)\n    const[validatevalue,setValidatevalue]=useState(\"\")\n    const[tskList,settskList]=useState([])\n    const[showallCheck,setShowallCheck]=useState(\"\")\n    const{username,SetUsername,userid,SetUserid}=useContext(ListContext);\n    const[fetchid,setFetchid]=useState([])\n    const[getid,setGetid]=useState(1)\n    let history=useHistory();\n\n    \n   \n\n  function passData(val)\n  {\n  \n    if(val.length>0)\n      {\n         var name= val[0].toUpperCase()+val.slice(1)\n\n      }\n\n      setTasks(name);\n\n\n     return val.length<15 ?'':setValidatevalue(\"max char 15\");\n\n     }\n\n\n\n     const deleteItem=(id,task_del)=>{\n      const updatedItems=items.filter((elm,ind)=>{\n        \n             return ind!==id;\n       \n                     } ) ;\n             deleteTask(task_del);\n             setItems(updatedItems);\n\n             } \n\n\n\n        const deleteTask=(childtask_id)=>{\n         // alert(\"del=\"+task_del)\n         let taskid=childtask_id\n         let todolistId=fetchid\n         alert(taskid)\n\n          Axios.delete(`http://localhost:4000/users/${userid}/todolists/${todolistId}/tasks/${taskid}`);\n      \n             };\n\n\n\n         \n          const updateTask=(tasname,childtodo_id)=>{\n            let taskid=childtodo_id,todolistid=fetchid\nalert(\"hihi\")\nalert(taskid)                       \n          Axios.put(`http://localhost:4000/users/${userid}/todolists/${todolistid}/tasks/${taskid}`,\n              {\n                tasname:tasname\n              \n              }).then((response)=>\n            \n             { alert(\"update\");\n          \n             }\n              \n             );\n            \n            \n             }\n\n\n\n\n\n\n  const addItem=()=>{\n    if(!task){\n    }else if(task && !toggleBtn){\n\n        setItems(\n           items.map((elem)=>{\n          \n          //alert(\"elem=\"+elem.childtodo_id)\n         // alert(\"isedit=\"+isEditItem)\n          if(elem.childtodo_id===isEditItem){\n             setToggleBtn(true)\n          \n              setTasks(\" \")\n            \n            \n              updateTask(task,elem.childtodo_id)\n              return{...elem,childtask_name:task}\n            \n                           }\n             return elem;\n            })\n      \n      )\n    } else{\n\n      setGetid(parseInt(getid+1))\n                     alert(getid)\n    setItems([{childtodo_id:getid,childtask_name:task,child_status:false},...items]);\n\n    setTasks(\"\")\n   \n   } }\n\n\n\n  const inputRef = useRef();\n  useEffect(() => {\n  inputRef.current.focus();\n\n                  })\n\n\n\n\n  const submitTask=()=>{\n   \n   let todolistid=fetchid\n        \n  if(task){\n      Axios.post(`http://localhost:4000/users/${userid}/todolists/${todolistid}/tasks`,{\n      task:task,\n      text:optionname,\n      Todoid:fetchid,\n      childtask_id:getid\n           \n   }).then(()=>{\n       alert(\"successful insert\")});\n       addItem();\n      \n             }\n       \n      \n                     };  \n\n\n \n   const editItem=(id)=>{\n      let newEditItem=items.find((elem)=>{\n    //alert(\"elem=\"+elem.childtodo_id)\n     //alert(\"id=\"+id)\n    \n    return elem.childtodo_id===id\n\n             });\n   setToggleBtn(false);\n   setTasks(newEditItem.childtask_name)\n   setIsEditItem(id)\n\n\n         }\n\n \n\n\n  useEffect(() => {\n   //let  optionname=fetchid\n  Axios.get(`http://localhost:4000/user/${userid}/todolists/${optionname}`,\n\n  {\n  \n  }).then(response=>{\n   \n     \n     var todoid=response.data[0].Todoid\n    \n     setFetchid(todoid)\n     alert(\"getid=\"+getid)\n     setGetid(parseInt(getid+10))\n     \n\n     \n     Axios.get(`http://localhost:4000/user/${userid}/todolists/${todoid}`,\n     { \n        \n     }).then(response=>{\n         \n    //setItems([{id:Date.now(),childtask_name:task,child_status:false});\n \n     setItems(response.data)\n    \n       \n    \n     \n       })\n        .catch(err=>{\n          console.log(err)\n        \n        })\n   \n\n \n  })\n  .catch(err=>{\n    console.log(err)\n  \n               })\n// SetUsername( response.data[0].user)\n  \n}, []);\n\n\n\n\n\n\n  const getTask=(e)=>{\n    \n    let todolistid=fetchid\n   \n       Axios.get(`http://localhost:4000/users/${userid}/todolists/${todolistid}`,{\n        \n\n        }).then((response)=>\n        settskList(response.data)\n     \n        )  \n\n        setShowallCheck(e.target.checked)\n                       }\n\n\n\n\n\n  const updateTaskStatus=(txt,status,childtodo_id)=>{\n    // alert(\"update\"+txt)\n    let taskid=childtodo_id\n    let todolistId=fetchid\n     \n      Axios.put(`http://localhost:4000/users/${userid}/todolists/${todolistId}/taasks/${taskid}`,\n      { status:status,txtupdate:txt}).then((response)=>\n  \n      { alert(\"update\");\n\n      }\n    \n     );\n   \n   }\n\n\n\n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          \n                   \n                          <label class=\"heading\"> {optionname}</label> <br></br> \n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\" class=\"todonametxt\" ref={inputRef}  title={validatevalue}   value={task}autoComplete=\"off\" maxLength=\"20\" onChange={(e)=>passData(e.target.value)}></input>&nbsp;&nbsp;\n                          </span>\n                          <span class=\"imgbutton\">\n                            {\n\n                              toggleBtn?<button onClick={submitTask}><img class=\"plusimage\" title=\"\" src=\"/image/plus.png\"></img></button>:<button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n                            }\n                            </span>\n                      \n                          { \n    \n    items.map((elm,ind)=>{\n   \n    \n   \n        return(\n          \n         \n                <div class=\"hhh\" key={ind}>\n                  \n\n                <input type=\"checkbox\"  name=\"taskname\"   onChange={(e)=>{\n                // alert(\"elmout\"+elm.id)\n                \n                 setItems(items.filter(obj2=>{\n\n                 \n         \n                  if(obj2.childtodo_id===elm.childtodo_id){\n                    \n                   obj2.child_status=e.target.checked\n\n  \n            \n               \n               updateTaskStatus(obj2.childtask_name,obj2.child_status,obj2.childtodo_id)\n                  \n                         \n                  }\n                  return obj2\n               \n                 \n                 })\n                 )}\n                 \n            \n                 \n               \n                 } value={elm.childtask_name} checked={elm.child_status==0?false:true} class=\"optionbtn\" name=\"option\"\n                \n                 />\n                 \n                            \n                \n \n         <label style={{textDecoration:elm.child_status==1?\"line-through\":\"none\"} }  name=\"text\">{elm.childtask_name}</label>\n         <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={()=>editItem(elm.childtodo_id)}/>\n         <i class=\"fa fa-trash\" title=\"delete Item\" onClick={()=>deleteItem(ind,elm.childtodo_id)}></i>\n\n          \n              </div>\n            \n            \n             ) \n            \n            }\n            \n            \n            \n\n                \n            )\n                       \n}\n\n\n\n\n\n                          </div>\n                          <div class=\"third_div\">\n\n                          <input type=\"checkbox\" class=\"\" value=\"0\" name=\"\" checked={showallCheck}  onChange={getTask}\n\n/>\n\n\n\n\n<span class=\"showcomplete_txt\" >\n     \n <label >completed Task</label></span>\n {\n     \n     tskList.map((val,key)=>{\n         \n     if(showallCheck===true){\n        \n         return (\n             <div class=\"showcheck\">        \n             <h4>Task Name:</h4>&nbsp;&nbsp;<h5>{val.childtask_name}</h5>\n             <h4>&nbsp;&nbsp;Created Date:</h4>&nbsp;&nbsp;<h5>{val.child_date}</h5>\n             </div>\n             \n                 )\n             }\n                 else {\n \n                     return null\n                 }\n                                  }\n                      )\n }  \n\n\n\n\n\n</div>\n                      \n      \n\n \n                  <span class=\"newbtn\"><input type=\"button\"  class=\"newbtn\" value= \" +   back\"  onClick={()=>history.push(\"/users/:userid/todolists\")} /></span> \n                  \n      \n </div>\n </div>\n     \n            \n        \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default ChildList;","/home/sonia/projects/AdvancedTodo/client/src/components/TaskList.js",["52","53","54","55","56","57","58","59","60","61","62","63","64","65","66","67","68","69","70"],"import react from 'react';\nimport React, { useState} from \"react\";\nimport {Link, useHistory} from \"react-router-dom\";\nimport{useContext} from 'react';\nimport Axios from 'axios';\nimport {ListContext} from '../context/ListContext.js'\nimport  { useRef, useEffect } from 'react';\nimport { subnetMatch } from 'ipaddr.js';\n\n\n  \n    \n\nconst Tasklist=()=>{\n\n\n  const{username,SetUsername,userid,SetUserid}=useContext(ListContext);\n    const{optionname,setOptionname}=useContext(ListContext)\n    const [task,setTasks] = useState(\"\");\n    const [items,setItems]=useState([]);\n    const[toggleBtn,setToggleBtn]=useState(true);\n    const[isEditItem,setIsEditItem]=useState(null);\n    const[optStatus,setOptStatus]=useState(false);\n    const[taskValue,setTaskvalue]=useState(\"\")\n    const[validatevalue,setValidatevalue]=useState(\"\")\n    const[fetchlist,setFetchlist]=useState([])\n    const[showList,setshowList]=useState([])\n    const[getid,setGetid]=useState(0)\n    let history=useHistory();\n\n    const[usertasklist,setUsertasklist]=useState([])\n\n\n\n\n\n\n\n\n  function passData(val)\n    \n      {\n        if(val.length>0)\n        {\n     var name= val[0].toUpperCase()+val.slice(1)\n      \n        }\n  \n      setTasks(name);\n  \n      return val.length<15 ?'':setValidatevalue(\"max char 15\");\n         \n      }\n\n\n\n  const submitTask=()=>{\n        \n      if(task){\n                \n      //  Axios.post(\"http://localhost:4000/taskinsert\",{\n        \n      //  task:task,userid:userid\n      Axios.post(`http://localhost:4000/users/${userid}/todolists`,{\n            todoid:getid,\n             task:task\n        }).then(()=>{\n          alert(\"successful insert\")});\n          addItem();\n       \n     \n\n                    }\n       else{\n       setTaskvalue(\"please fill the field\");\n       inputRef.current.focus();\n            }\n                       };  \n  \n\n\n    const inputRef = useRef();\n      useEffect(() => {\n       inputRef.current.focus();\n\n                       })\n\n\n\n\n    const deleteItem=(id,todolist_id)=>{\n    const updatedItems=items.filter((elm,ind)=>{\n        \n           return ind!==id;\n       \n                      } ) ;\n             deleteTask(todolist_id);\n             setItems(updatedItems);\n\n          } \n\n\n\n\n\n          \n\n          const updateTask=(tasname,todolistid)=>{\n          \n           \n        \n        Axios.put(`http://localhost:4000/users/${userid}/todolists/${todolistid}`,\n             {\n              tasname:tasname\n            \n              }).then((response)=>\n          \n             { \n               //alert(\"update\");\n        \n              }\n            \n              );\n          \n          \n              }\n\n              \n        //const updateTaskStatus=(txt,status,Todoid)=>{\n          \n                 //  let todolistId=Todoid\n       // Axios.put(`http://localhost:4000/users/${userid}/todolist/${todolistid}`,\n          // { status:status,txtupdate:txt}).then((response)=>\n          \n          // { \n             //alert(\"update\");\n        \n         //  }\n            \n          // );\n          \n          \n         // }\n        \n        \n          useEffect(() => {\n        \n            Axios.get(`http://localhost:4000/users/${userid}/todolists`,\n\n           // Axios.get(`http://localhost:4000/fetchData/${userid}`,\n         { userid:userid}\n            \n            ).then(response=>{\n            \n              var todoid=response.data[0].Todoid\n       setItems(response.data)\n       setGetid(parseInt(todoid+10))\n      \n      // setItems([{Taskid:response.data[0].Taskid,Taskname:task,status:false},...items]); \n       \n            })\n            .catch(err=>{\n              console.log(err)\n              \n            \n            })\n           \n\n            Axios.get(`http://localhost:4000/users/todolists`,\n            {})\n            .then(response=>{\n              alert(\"max=\"+response.data[0].Todoid)\n\n            }).catch(err=>{\n\n              console.log(err)\n            })\n          \n            \n        }, []);           \n      \n           \n                \n         \n                  \n\n\n        const deleteTask=(todolist_id,userid)=>{\nalert(todolist_id)\n          Axios.delete(`http://localhost:4000/users/${userid}/todolists/${todolist_id}`);\n      \n                                     };\n \n\n    const addItem=()=>{\n         if(!task){\n                  }else if(task && !toggleBtn){\n\n                  setItems(\n                  items.map((elem)=>{\n                    \n                              if(elem.Todoid===isEditItem){\n                              setToggleBtn(true)\n          \n                              setTasks(\" \")\n                               updateTask(task,elem.Todoid)\n                               return{...elem,Todoname:task}\n            \n                                     }\n                  return elem;\n                  })\n      \n                           )\n                     } else{\n                     // getTaskid()\n                     // alert(\"getid=\"+getid)\n                     setGetid(parseInt(getid+1))\n                     alert(getid)\n                       // setGetid(getid)\n                         setItems([{Todoid:getid,Todoname:task,status:false},...items]);\n\n                          setTasks(\"\");\n                          setValidatevalue(\"\");\n   \n                            }\n                      }\n\n\n\n\n\n\n      const editItem=(id)=>{\n  \n        let newEditItem=items.find((elem)=>{\n      //  alert(\"id=\"+id)\n        return elem.Todoid===id\n\n                          });\n         setToggleBtn(false);\n        // alert(\"new=\"+newEditItem.Taskname)\n          setTasks(newEditItem.Todoname)\n         // alert(\"id=\"+id)\n          setIsEditItem(id)\n\n\n          }\n\n\n        const redirectTask=()=>{\n\n  \n\n        history.push(\"/users/:userid/todolist/:todolistid\");\n\n                 \n\n          }\n\n     \n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          <button id = \"logout\" class=\"closebtn\" title=\"Log out\" onClick={()=>{history.push( \"/\")}}> ...</button>\n                          <label class=\"heading\"> Hi...{username}</label> <br></br> \n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\"  ref={inputRef} class=\"todonametxt\" title={validatevalue} value={task}autoComplete=\"off\" maxLength=\"20\" onChange={(e)=>passData(e.target.value)}></input>&nbsp;&nbsp;\n                          </span>\n                          \n                          <span class=\"imgbutton\">\n                            {\n\n                              toggleBtn?<button onClick={submitTask}><img class=\"plusimage\"  src=\"/image/plus.png\"></img></button>:<button onClick={addItem}><img class=\"plusimage\" title=\"edit\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\"></img></button>\n                            }\n                            </span>\n                           \n                      \n                          { \n    \n    items.map((elm,ind)=>{\n  \n        return(\n          \n         \n                <div class=\"insert\" key={ind}>\n\n                <input type=\"radio\"  name=\"taskname\"    onChange={(e)=>{\n                \n                 setItems(items.filter(obj2=>{\n                  \n\n                  if(obj2.childtodo_id===elm.childtodo_id){\n          \n                   obj2.status=e.target.checked\n\n                setOptionname(elm.Todoname);\n  \n              //setOptionname(items)\n            \n               \n            //   updateTaskStatus(obj2.text,obj2.status,obj2.Todoid)\n          \n                         \n                  }\n                  return obj2\n               \n                 \n                 })\n                 )}\n               \n                 } value={elm.Todoname} checked={elm.status} class=\"optionbtn\" name=\"option\" onClick= {redirectTask} \n                \n                 />\n                 \n                            \n                \n \n         <label name=\"text\">{elm.Todoname}</label>\n         <img title=\"edit item\" class=\"editimg\" src=\"https://img.icons8.com/color/48/000000/edit-property.png\" onClick={()=>editItem(elm.Todoid)}/>\n         <i class=\"fa fa-trash\" title=\"delete Item\" onClick={()=>deleteItem(ind,elm.Todoid)}></i>\n\n          \n              </div>\n            \n            \n             ) \n            \n            }\n            \n            \n            \n\n                \n            )\n                       \n}\n  \n                      \n                          </div>\n                        \n                   </div>\n                 \n          \n           </div>\n           \n          \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default Tasklist;","/home/sonia/projects/AdvancedTodo/client/src/components/Login.js",["71","72","73","74","75","76","77","78"],"import react, { useRef,useState ,useEffect} from 'react';\n\nimport Axios from 'axios';\nimport { Redirect } from 'react-router-dom';\nimport Tasklist from './TaskList';\nimport {useHistory} from \"react-router-dom\";\nimport {ListContext} from '../context/ListContext.js'\nimport{useContext} from 'react';\n\n\n\n\n\nconst Login=()=>{\n\n   const{username,SetUsername,userid,SetUserid}=useContext(ListContext);\n   const [loginstatus,SetLoginstatus]=useState(\"\")\n   const [textstatus,Settextstatus]=useState(\"\")\n  \n   let history=useHistory();\n\n   const [user,setUser] = useState({\n\n    email:\"\",password:\"\"\n    \n      });\n      \n      \n      let name,value,bool;\n      const handleInputs=(e)=>{\n      \n         name=e.target.name;\n       // alert(\"name=\"+name)\n         value=e.target.value;\n        if(name===\"email\"){\n            const emailRegex = /\\S+@\\S+\\.\\S+/;\n        if (emailRegex.test(value)) {\n             Settextstatus(\"\")\n        \n        \n      } else{\n          Settextstatus(\"not valid email\");\n       \n          }\n        \n      }\n    \n        setUser({...user,[name]:value});\n    \n      }\n      \n      const loginData=()=>{\n        const {email,password}=user;\n          \n        if(user){\n        \n                  \n          Axios.post(`http://localhost:4000/users/todolists`,{\n          \n          email,password\n               \n          }).then((response)=>{\n          \n           if(response.data.message){\n               Settextstatus(\"\")\n             SetLoginstatus(response.data.message)\n           //  alert(response.data.message)\n           }\n          \n           \n           else\n          \n           if(response.data[0].email)\n           {\n             var user=response.data[0].f_name\n            // alert(\"user=\"+user)\n             var userid=response.data[0].user_id\n            // alert(\"userid=\"+userid)\n           \n           SetUsername(user);\n           SetUserid(userid)\n               \n           history.push('/users/:user/todolists')\n           }\n        \n           });\n       \n                      } \n                // cancelData();   \n                    \n           };  \n\n\n     \n          \n\n\n\n    \n         const cancelData = () => { \n         setUser({email:\" \",password:\" \"})\n         SetLoginstatus(\" \")\n         Settextstatus(\" \")\n         \n          }\n       \n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          <img  class=\"todoimg\" src=\"/image/todoicon.jpeg\"></img>\n                          &nbsp;&nbsp;&nbsp;<label class=\"heading\">ToDo App</label> <br></br> <br></br>\n                          <label class=\"todolbl\" >Login</label><br></br>\n                          <label class=\"todolbl2\" >Login with E-mail</label><br></br>\n                        <span class=\"thirdcontainer\">\n                          <input type=\"text\"  name=\"email\" class=\"todonametxt\"   value={user.email} autoComplete=\"off\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n                          </span><br></br>\n                          <p>{textstatus}</p>\n                          <label class=\"todolbl\" >Password</label><br></br>\n                          \n                        <span class=\"thirdcontainer\">\n                          <input type=\"password\" name=\"password\"  class=\"todopasstxt\" value={user.password} autoComplete=\"off\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n                          </span>\n                          <p>{loginstatus}</p>\n                          <div class=\"btnclass\">\n                          <button  class=\"todobtn\" onClick={loginData}>SignIn</button>&nbsp;&nbsp;<button class=\"todobtn\" onClick={cancelData }>Reset</button>\n                          <a href=\"/users\" class=\"signup\">SignUp</a></div>\n                          \n                           \n                      \n                          \n                          </div>\n                         \n          \n                   </div>\n                   \n                     \n          \n           </div>\n           \n          \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default Login;\n\n\n\n\n    \n\n","/home/sonia/projects/AdvancedTodo/client/src/components/SignUp.js",["79","80","81","82","83","84","85"],"import react from 'react';\nimport React, { useState} from \"react\";\nimport Axios from 'axios';\n\n\n\n\n\nconst SignUp=()=>{\n\nconst [txtvalidate,Settxtvalidate]=useState(\"\")\n\n  const [user,setUser] = useState({\n\nfname:\"\",lname:\"\",email:\"\",password:\"\",cpassword:\"\"\n\n  });\n  \n  let name,value;\n  const handleInputs=(e)=>{\n\n    name=e.target.name;\n    value=e.target.value;\n    \n      ///////////////////////\n\n\n     \n\n\n      ///////////////////////\n\n    setUser({...user,[name]:value});\n\n  }\n\n\n\n  \n  const registerData=()=>{\n    const {fname,lname,email,password,cpassword}=user;\n      \n    if(user){\n    \n              \n      Axios.post(\"http://localhost:4000/users\",{\n      \n      fname,lname,email,password,cpassword\n           \n      }).then(()=>{\n       \n        alert(\"successful insert\")});\n   \n                  } \n             cancelData();   \n                \n       };  \n\n     const cancelData = () => { \n     setUser({fname:\"\",lname:\"\",email:\"\",password:\"\",cpassword:\"\"})\n      }\n\n\n\n\n\n\n\n\n  function passData(val,name)\n    \n  {\n    alert(name)\n  }\n\n\n\n\n    return(\n\n        <react.Fragment>\n          \n          <div class=\"parent_div\">\n                   <div class=\"container\">\n                \n                     \n                          <div class=\"secondcontainer\">\n                          \n                          &nbsp;&nbsp;&nbsp;<label class=\"heading\">SignUp</label> <br></br> <br></br>\n                          \n                         \n                          \n                        <span class=\"thirdcontainer\">\n                        <img  class=\"userpic\" src=\"/image/usericon.jpeg\"></img>&nbsp;\n                          <input type=\"text\"  name=\"fname\" value={user.fname} class=\"todonametxt\" placeholder=\"First Name .......\"  autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n                          </span><br></br>\n                        \n                         \n                          <span class=\"thirdcontainer\">\n                             <img  class=\"userpic\" src=\"/image/usericon.jpeg\"></img>&nbsp;\n                          \n                          <input type=\"text\"  name=\"lname\" value={user.lname} class=\"todonametxt\" placeholder=\"Second Name.....\"      autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input><br></br>\n                          </span>\n                          \n                          <span class=\"thirdcontainer\">\n                          <img  class=\"mailpic\" src=\"/image/mails.jpeg\"></img>&nbsp;\n                          <input type=\"text\" name=\"email\" value={user.email}  class=\"todonametxt\" placeholder=\"E_mail.....\"  autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs}></input>&nbsp;&nbsp;\n                          </span><br></br>\n                          \n                          \n                          \n                        <span class=\"thirdcontainer\">\n                        <img  class=\"mailpic\" src=\"/image/lock.jpeg\"></img>&nbsp;\n                          <input type=\"text\"  name=\"password\" value={user.password} class=\"todonametxt\" placeholder=\"Password.....\"  autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs}></input>\n                          </span><br></br>\n                          <p>{txtvalidate}</p>\n                          \n                          <span class=\"thirdcontainer\">\n                          <img  class=\"mailpic\" src=\"/image/lock.jpeg\"></img>&nbsp;\n                            <input type=\"text\"  name=\"cpassword\" value={user.cpassword} class=\"todonametxt\" placeholder=\"Re_enetr Password.....\"    autoComplete=\"nope\" maxLength=\"20\" onChange={handleInputs} ></input>&nbsp;&nbsp;\n                            </span>\n                            <p>{txtvalidate}</p>\n                          <div class=\"btnclass\">\n                          <button  class=\"todobtn\" onClick={registerData}>Register</button>&nbsp;&nbsp;<button class=\"todobtn\" onClick={cancelData }>Reset</button>\n                          <a href=\"/\" class=\"signup\">Login</a>\n                          </div>\n                          \n                        \n                    \n                          \n                          </div>\n                         \n          \n                   </div>\n                   \n                      \n          \n           </div>\n           \n          \n          \n          </react.Fragment>\n          \n            \n          \n          )\n\n}\nexport default SignUp;",{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":18,"column":22,"nodeType":"92","messageId":"93","endLine":18,"endColumn":35},{"ruleId":"90","severity":1,"message":"94","line":22,"column":11,"nodeType":"92","messageId":"93","endLine":22,"endColumn":19},{"ruleId":"90","severity":1,"message":"95","line":22,"column":20,"nodeType":"92","messageId":"93","endLine":22,"endColumn":31},{"ruleId":"90","severity":1,"message":"96","line":22,"column":39,"nodeType":"92","messageId":"93","endLine":22,"endColumn":48},{"ruleId":"97","severity":1,"message":"98","line":226,"column":4,"nodeType":"99","endLine":226,"endColumn":6,"suggestions":"100"},{"ruleId":"101","severity":1,"message":"102","line":291,"column":70,"nodeType":"103","endLine":291,"endColumn":124},{"ruleId":"101","severity":1,"message":"102","line":291,"column":166,"nodeType":"103","endLine":291,"endColumn":265},{"ruleId":"104","severity":1,"message":"105","line":334,"column":72,"nodeType":"106","messageId":"107","endLine":334,"endColumn":74},{"ruleId":"108","severity":1,"message":"109","line":334,"column":106,"nodeType":"110","messageId":"111","endLine":334,"endColumn":119},{"ruleId":"104","severity":1,"message":"105","line":341,"column":56,"nodeType":"106","messageId":"107","endLine":341,"endColumn":58},{"ruleId":"101","severity":1,"message":"102","line":342,"column":10,"nodeType":"103","endLine":342,"endColumn":154},{"ruleId":"90","severity":1,"message":"112","line":3,"column":9,"nodeType":"92","messageId":"93","endLine":3,"endColumn":13},{"ruleId":"90","severity":1,"message":"113","line":8,"column":10,"nodeType":"92","messageId":"93","endLine":8,"endColumn":21},{"ruleId":"90","severity":1,"message":"95","line":17,"column":18,"nodeType":"92","messageId":"93","endLine":17,"endColumn":29},{"ruleId":"90","severity":1,"message":"96","line":17,"column":37,"nodeType":"92","messageId":"93","endLine":17,"endColumn":46},{"ruleId":"90","severity":1,"message":"114","line":18,"column":11,"nodeType":"92","messageId":"93","endLine":18,"endColumn":21},{"ruleId":"90","severity":1,"message":"115","line":23,"column":11,"nodeType":"92","messageId":"93","endLine":23,"endColumn":20},{"ruleId":"90","severity":1,"message":"116","line":23,"column":21,"nodeType":"92","messageId":"93","endLine":23,"endColumn":33},{"ruleId":"90","severity":1,"message":"117","line":24,"column":11,"nodeType":"92","messageId":"93","endLine":24,"endColumn":20},{"ruleId":"90","severity":1,"message":"118","line":26,"column":11,"nodeType":"92","messageId":"93","endLine":26,"endColumn":20},{"ruleId":"90","severity":1,"message":"119","line":26,"column":21,"nodeType":"92","messageId":"93","endLine":26,"endColumn":33},{"ruleId":"90","severity":1,"message":"120","line":27,"column":11,"nodeType":"92","messageId":"93","endLine":27,"endColumn":19},{"ruleId":"90","severity":1,"message":"121","line":27,"column":20,"nodeType":"92","messageId":"93","endLine":27,"endColumn":31},{"ruleId":"90","severity":1,"message":"122","line":31,"column":11,"nodeType":"92","messageId":"93","endLine":31,"endColumn":23},{"ruleId":"90","severity":1,"message":"123","line":31,"column":24,"nodeType":"92","messageId":"93","endLine":31,"endColumn":39},{"ruleId":"97","severity":1,"message":"124","line":180,"column":12,"nodeType":"99","endLine":180,"endColumn":14,"suggestions":"125"},{"ruleId":"101","severity":1,"message":"102","line":282,"column":70,"nodeType":"103","endLine":282,"endColumn":116},{"ruleId":"101","severity":1,"message":"102","line":282,"column":158,"nodeType":"103","endLine":282,"endColumn":257},{"ruleId":"108","severity":1,"message":"109","line":320,"column":80,"nodeType":"110","messageId":"111","endLine":320,"endColumn":93},{"ruleId":"101","severity":1,"message":"102","line":328,"column":10,"nodeType":"103","endLine":328,"endColumn":148},{"ruleId":"90","severity":1,"message":"126","line":1,"column":17,"nodeType":"92","messageId":"93","endLine":1,"endColumn":23},{"ruleId":"90","severity":1,"message":"127","line":1,"column":34,"nodeType":"92","messageId":"93","endLine":1,"endColumn":43},{"ruleId":"90","severity":1,"message":"128","line":4,"column":10,"nodeType":"92","messageId":"93","endLine":4,"endColumn":18},{"ruleId":"90","severity":1,"message":"129","line":5,"column":8,"nodeType":"92","messageId":"93","endLine":5,"endColumn":16},{"ruleId":"90","severity":1,"message":"94","line":16,"column":10,"nodeType":"92","messageId":"93","endLine":16,"endColumn":18},{"ruleId":"90","severity":1,"message":"130","line":16,"column":31,"nodeType":"92","messageId":"93","endLine":16,"endColumn":37},{"ruleId":"90","severity":1,"message":"131","line":29,"column":22,"nodeType":"92","messageId":"93","endLine":29,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":117,"column":27,"nodeType":"103","endLine":117,"endColumn":76},{"ruleId":"90","severity":1,"message":"132","line":11,"column":20,"nodeType":"92","messageId":"93","endLine":11,"endColumn":34},{"ruleId":"90","severity":1,"message":"133","line":70,"column":12,"nodeType":"92","messageId":"93","endLine":70,"endColumn":20},{"ruleId":"101","severity":1,"message":"102","line":94,"column":25,"nodeType":"103","endLine":94,"endColumn":74},{"ruleId":"101","severity":1,"message":"102","line":100,"column":30,"nodeType":"103","endLine":100,"endColumn":79},{"ruleId":"101","severity":1,"message":"102","line":106,"column":27,"nodeType":"103","endLine":106,"endColumn":73},{"ruleId":"101","severity":1,"message":"102","line":113,"column":25,"nodeType":"103","endLine":113,"endColumn":70},{"ruleId":"101","severity":1,"message":"102","line":119,"column":27,"nodeType":"103","endLine":119,"endColumn":72},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'setOptionname' is assigned a value but never used.","Identifier","unusedVar","'username' is assigned a value but never used.","'SetUsername' is assigned a value but never used.","'SetUserid' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getid', 'optionname', and 'userid'. Either include them or remove the dependency array. You can also do a functional update 'setGetid(g => ...)' if you only need 'getid' in the 'setGetid' call.","ArrayExpression",["136"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Link' is defined but never used.","'subnetMatch' is defined but never used.","'optionname' is assigned a value but never used.","'optStatus' is assigned a value but never used.","'setOptStatus' is assigned a value but never used.","'taskValue' is assigned a value but never used.","'fetchlist' is assigned a value but never used.","'setFetchlist' is assigned a value but never used.","'showList' is assigned a value but never used.","'setshowList' is assigned a value but never used.","'usertasklist' is assigned a value but never used.","'setUsertasklist' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userid'. Either include it or remove the dependency array.",["137"],"'useRef' is defined but never used.","'useEffect' is defined but never used.","'Redirect' is defined but never used.","'Tasklist' is defined but never used.","'userid' is assigned a value but never used.","'bool' is defined but never used.","'Settxtvalidate' is assigned a value but never used.","'passData' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [getid, optionname, userid]",{"range":"142","text":"143"},"Update the dependencies array to be: [userid]",{"range":"144","text":"145"},[4500,4502],"[getid, optionname, userid]",[3967,3969],"[userid]"]